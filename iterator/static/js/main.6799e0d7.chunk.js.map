{"version":3,"sources":["Iterator.ts","Tree.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Iterator","tree","currentNode","id","this","getRoot","counter","data","prevNode","Tree","findPrev","alert","nextNode","findNext","setOnRoot","left","right","iterators","root","insertLeft","insertRight","node","parent","curNode","forEach","iterator","deleteCurrentNode","push","leftMostNode","rightMostNode","refreshChart","currentIt","convertNode","children","text","name","toString","Treant","chart","container","nodeStructure","document","querySelectorAll","el","style","color","textContent","includes","replace","createIterator","App","inputEl","useRef","useState","setCurrentIt","update","handleLeft","setOnPrev","handleRight","setOnNext","useEffect","onkeydown","e","keyCode","onClick","setOnLeft","setOnRight","ref","type","defaultValue","current","value","replaceData","deleteNode","onChange","Number","target","match","getIterators","find","it","getId","activeElement","HTMLElement","blur","map","key","getVal","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6799e0d7.chunk.js","sourcesContent":["import Tree, { Node } from './Tree'\r\n\r\nexport default class Iterator {\r\n    constructor(tree: Tree) {\r\n        this.tree = tree\r\n        this.currentNode = tree.getRoot()\r\n        this.id = Iterator.counter++\r\n    }\r\n    public getVal(): any {\r\n        if (!this.currentNode) return\r\n\r\n        return this.currentNode.data\r\n    }\r\n    public setOnRoot() {\r\n        this.currentNode = this.tree.getRoot()\r\n        return this.currentNode\r\n    }\r\n    public setOnPrev() {\r\n        if (!this.currentNode) return\r\n\r\n        const prevNode = Tree.findPrev(this.currentNode)\r\n        if (!prevNode) {\r\n            alert('Начальный узел')\r\n        } else {\r\n            this.currentNode = prevNode\r\n        }\r\n        return this.currentNode\r\n    }\r\n    public setOnNext() {\r\n        if (!this.currentNode) return\r\n\r\n        const nextNode = Tree.findNext(this.currentNode)\r\n        if (!nextNode) {\r\n            alert('Последний узел')\r\n        } else {\r\n            this.currentNode = nextNode\r\n        }\r\n        return this.currentNode\r\n    }\r\n    public setOnLeft() {\r\n        this.currentNode = this.setOnRoot()\r\n        while (this.currentNode?.left) {\r\n            this.currentNode = this.currentNode.left\r\n        }\r\n        return this.currentNode\r\n    }\r\n    public setOnRight() {\r\n        this.currentNode = this.setOnRoot()\r\n        while (this.currentNode?.right) {\r\n            this.currentNode = this.currentNode.right\r\n        }\r\n        return this.currentNode\r\n    }\r\n    public getId(): number {\r\n        return this.id\r\n    }\r\n    public deleteCurrentNode() {\r\n        delete this.currentNode\r\n    }\r\n    public currentNode?: Node\r\n    private static counter = 1\r\n    private readonly id: number\r\n    private tree: Tree\r\n}\r\n","import Iterator from './Iterator'\r\n\r\nexport interface Node {\r\n    data: any\r\n    left?: Node,\r\n    right?: Node,\r\n    parent?: Node,\r\n}\r\n\r\nexport default class Tree {\r\n    constructor() {\r\n        this.root = {\r\n            data: '1',\r\n        }\r\n        Tree.insertLeft('2', this.root)\r\n        Tree.insertRight('3', this.root)\r\n        Tree.insertLeft('4', this.root.left)\r\n        Tree.insertRight('5', this.root.left)\r\n        Tree.insertLeft('6', this.root.right)\r\n        Tree.insertRight('7', this.root.right)\r\n        Tree.insertLeft('8', this.root.right?.right)\r\n        Tree.insertRight('9', this.root.right?.right)\r\n        this.iterators = []\r\n    }\r\n    public getRoot(): Node {\r\n        return this.root\r\n    }\r\n    public static findNext(node: Node) {\r\n        if (node.right) {\r\n            return Tree.leftMostNode(node.right)\r\n        }\r\n        let { parent } = node\r\n        while (parent && node === parent.right) {\r\n            node = parent\r\n            parent = parent.parent\r\n        }\r\n        return parent\r\n    }\r\n    public static findPrev(node: Node) {\r\n        if (node.left) {\r\n            return Tree.rightMostNode(node.left)\r\n        }\r\n        let { parent } = node\r\n        while (parent && node === parent.left) {\r\n            node = parent\r\n            parent = parent.parent\r\n        }\r\n        return parent\r\n    }\r\n    private static leftMostNode(node: Node): Node {\r\n        let curNode = node\r\n        while (curNode && curNode.left) {\r\n            curNode = curNode.left\r\n        }\r\n        return curNode\r\n    }\r\n    private static rightMostNode(node: Node): Node {\r\n        let curNode = node\r\n        while (curNode && curNode.right) {\r\n            curNode = curNode.right\r\n        }\r\n        return curNode\r\n    }\r\n    public static insertLeft(data: any, node?: Node) {\r\n        if (!node) return\r\n        const { left } = node\r\n        node.left = {\r\n            data,\r\n            parent: node,\r\n            left,\r\n        }\r\n        if (left) left.parent = node.left\r\n    }\r\n    public static insertRight(data: any, node?: Node) {\r\n        if (!node) return\r\n        const { right } = node\r\n        node.right = {\r\n            data,\r\n            parent: node,\r\n            right\r\n        }\r\n        if (right) right.parent = node.right\r\n    }\r\n    public static replaceData(data: any, node?: Node) {\r\n        if (!node) return\r\n\r\n        node.data = data\r\n    }\r\n    public deleteNode(node?: Node) {\r\n        if (!node ) return\r\n\r\n        //Если у удаляемого узла нет детей просто удаляем ссылку у родителя\r\n        if (!node.right && !node.left && node.parent) {\r\n            if (node === node.parent.left) {\r\n                delete node.parent.left\r\n            } else {\r\n                delete node.parent.right\r\n            }\r\n        } else {\r\n            // Ищем узел без детей для вставки на место удаляемого\r\n            let curNode = this.root\r\n            while(curNode.left || curNode.right) {\r\n                if (curNode.right) {\r\n                    curNode = curNode.right\r\n                } else if (curNode.left) {\r\n                    curNode = curNode.left\r\n                }\r\n            }\r\n            if (curNode === this.root) {\r\n                alert('Нельзя удалить единственный узел')\r\n            } else {\r\n                if (node === this.root) this.root = curNode\r\n                if (curNode === curNode.parent?.left) {\r\n                    delete curNode.parent.left\r\n                } else if (curNode === curNode.parent?.right)  {\r\n                    delete curNode.parent.right\r\n                }\r\n                curNode.parent = node.parent\r\n                curNode.left = node.left\r\n                curNode.right = node.right\r\n                if (node === node.parent?.left) {\r\n                    node.parent.left = curNode\r\n                } else if (node === node.parent?.right)  {\r\n                    node.parent.right = curNode\r\n                }\r\n                if (node.left) {\r\n                    node.left.parent = curNode\r\n                }\r\n                if (node.right) {\r\n                    node.right.parent = curNode\r\n                }\r\n            }\r\n        }\r\n        this.iterators.forEach(iterator => {\r\n            if (iterator.currentNode === node) {\r\n                iterator.deleteCurrentNode()\r\n            }\r\n        })\r\n    }\r\n    public createIterator() {\r\n        const iterator = new Iterator(this)\r\n        this.iterators.push(iterator)\r\n        return iterator\r\n    }\r\n    public getIterators(): Iterator[] {\r\n        return this.iterators\r\n    }\r\n    public iterators: Iterator[]\r\n    private root: Node\r\n}\r\n","import React, { ReactElement, useEffect, useRef, useState } from 'react'\r\nimport Tree, { Node } from './Tree'\r\nimport Iterator from \"./Iterator\"\r\n\r\ninterface NodeView extends Node {\r\n    text: {\r\n        name: string\r\n    },\r\n    children: NodeView[]\r\n}\r\n\r\nfunction refreshChart(currentIt: Iterator) {\r\n    convertNode(tree.getRoot())\r\n    const { currentNode } = currentIt\r\n    if (currentNode) {\r\n        // @ts-ignore\r\n        currentNode.text.name += '●'\r\n    }\r\n    // @ts-ignore\r\n    new Treant({\r\n        chart: {\r\n            container: '#tree'\r\n        },\r\n        nodeStructure: tree.getRoot()\r\n    })\r\n    const elements = document.querySelectorAll('.node')\r\n    elements.forEach(el => {\r\n        // @ts-ignore\r\n        el.style.color = \"black\"\r\n        if (el.textContent?.includes('●')) {\r\n            // @ts-ignore\r\n            el.style.color = \"red\"\r\n            el.textContent.replace('●', '')\r\n        }\r\n    })\r\n}\r\nfunction convertNode(node: any): NodeView {\r\n    node.children = []\r\n    node.text = {\r\n       name: 'Data: ' + node.data.toString()\r\n    }\r\n    if (node.left) {\r\n        convertNode(node.left)\r\n        node.children.push(node.left)\r\n    }\r\n    if (node.right) {\r\n        convertNode(node.right)\r\n        node.children.push(node.right)\r\n    }\r\n    return node\r\n}\r\n\r\nconst tree = new Tree()\r\nconst iterator = tree.createIterator()\r\n\r\nfunction App(): ReactElement {\r\n    const inputEl = useRef(null);\r\n    const [currentIt, setCurrentIt] = useState(iterator)\r\n    const [, update] = useState({})\r\n    useEffect(() => {\r\n       refreshChart(currentIt)\r\n    }, [])\r\n\r\n    function handleLeft(): void {\r\n        currentIt.setOnPrev()\r\n        refreshChart(currentIt)\r\n        update({})\r\n    }\r\n    function handleRight(): void {\r\n        currentIt.setOnNext()\r\n        refreshChart(currentIt)\r\n        update({})\r\n    }\r\n    document.onkeydown = checkKey;\r\n    function checkKey(e: any) {\r\n        if (e.keyCode === 37) {\r\n            handleLeft()\r\n        }\r\n        else if (e.keyCode === 39) {\r\n            handleRight()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div id='tree' />\r\n            <button onClick={() => {\r\n                currentIt.setOnLeft()\r\n                refreshChart(currentIt)\r\n                update({})\r\n            }}>{'<==='}</button>\r\n            <button onClick={handleLeft}>{'<='}</button>\r\n            <button onClick={() => {\r\n                currentIt.setOnRoot()\r\n                refreshChart(currentIt)\r\n                update({})\r\n            }}>Root</button>\r\n            <button onClick={handleRight}>{'=>'}</button>\r\n            <button onClick={() => {\r\n                currentIt.setOnRight()\r\n                refreshChart(currentIt)\r\n                update({})\r\n            }}>{'===>'}</button>\r\n            <br/>\r\n            <input ref={inputEl} type=\"text\" defaultValue=\"0\" />\r\n            <button onClick={() => {\r\n                // @ts-ignore\r\n                Tree.insertLeft(inputEl.current.value, currentIt.currentNode)\r\n                refreshChart(currentIt)\r\n                update({})\r\n            }}>Insert left</button>\r\n            <button onClick={() => {\r\n                // @ts-ignore\r\n                Tree.insertRight(inputEl.current.value, currentIt.currentNode)\r\n                refreshChart(currentIt)\r\n                update({})\r\n            }}>Insert right</button>\r\n            <button onClick={() => {\r\n                // @ts-ignore\r\n                Tree.replaceData(inputEl.current.value, currentIt.currentNode)\r\n                refreshChart(currentIt)\r\n                update({})\r\n            }}>Replace data</button>\r\n            <button onClick={() => {\r\n                tree.deleteNode(currentIt.currentNode)\r\n                refreshChart(currentIt)\r\n                update({})\r\n            }}>Delete on Iterator</button>\r\n            <br/>\r\n            <button onClick={() => {\r\n                tree.createIterator()\r\n                refreshChart(currentIt)\r\n                update({})\r\n            }}>New Iterator</button>\r\n            <select onChange={(e) => {\r\n                // @ts-ignore\r\n                const id = Number(e.target.value.match(/id([0-9]+)/)[1])\r\n                const iterator = tree.getIterators().find((it) => {return it.getId() === id})\r\n                if (iterator) {\r\n                    setCurrentIt(iterator)\r\n                    refreshChart(iterator)\r\n                }\r\n                if (document.activeElement instanceof HTMLElement) document.activeElement.blur()\r\n            }}>\r\n                {tree.getIterators().map(iterator => {\r\n                    return <option key={iterator.getId()}>{`Итератор id${iterator.getId()}`}</option>\r\n                })}\r\n            </select>\r\n            <ul>\r\n            {tree.getIterators().map(iterator => {\r\n                return <li key={iterator.getId()}>{`Id: ${iterator.getId()} Data: ${iterator.getVal() || 'NULL'}`}</li>\r\n            })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}