{"version":3,"sources":["actions/index.js","helpers/startParserWorker.js","workers/parser.worker.js","helpers/index.js","workers/fileLoader.worker.js","components/ParserOptions.js","components/ThemeOptions.js","components/LangOptions.js","components/FileLoader.js","components/OutputTypeSwitcher.js","containers/MenuBar.js"],"names":["updateOptions","options","lang","type","payload","updateInput","value","updateLang","updateTheme","theme","startParsing","updateOutput","output","updateOutputType","loadFile","file","closeFile","startParserWorker","message","callback","worker","ParserWorker","postMessage","onmessage","e","terminate","module","exports","Worker","__webpack_public_path__","getFileExtensionByLang","getLangByFileName","fileName","match","Error","keyMap","retainLines","ParserOptions","disabled","onChange","className","placeholder","readOnly","Object","keys","length","map","key","id","checked","htmlFor","ThemeOptions","LangOptions","FileLoader","onCloseFile","onLoadFile","isLoading","onClick","allowedTypes","OutputTypeSwitcher","outputType","filter","includes","event","target","connect","input","dispatch","bindActionCreators","handleParserComplete","data","newOptions","prevState","JSON","parse","window","localStorage","getItem","preloadedState","files","fileLang","name","alert","FileLoaderWorker","onerror"],"mappings":"oHAAO,SAASA,EAAeC,EAASC,GACtC,MAAO,CACLC,KAAM,iBACNC,QAAS,CAAEH,UAASC,SAIjB,SAASG,EAAaC,EAAOJ,GAClC,MAAO,CACLC,KAAM,eACNC,QAAS,CAAEE,QAAOJ,SAIf,SAASK,EAAYL,GAC1B,MAAO,CACLC,KAAM,cACNC,QAASF,GAIN,SAASM,EAAaC,GAC3B,MAAO,CACLN,KAAM,eACNC,QAASK,GAIN,SAASC,IACd,MAAO,CACLP,KAAM,iBAIH,SAASQ,EAAcC,GAC5B,MAAO,CACLT,KAAM,gBACNC,QAASQ,GAIN,SAASC,EAAkBV,GAChC,MAAO,CACLA,KAAM,qBACNC,QAASD,GAIN,SAASW,EAAUC,GACxB,MAAO,CACLZ,KAAM,YACNC,QAASW,GAIN,SAASC,IACd,MAAO,CACLb,KAAM,cAzDV,mT,iCCAA,wDAEe,SAASc,EAAmBC,EAASC,GAClD,IAAMC,EAAS,IAAIC,IACnBD,EAAOE,YAAYJ,GACnBE,EAAOG,UAAY,SAACC,GAClBL,EAASK,GACTJ,EAAOK,e,oBCPXC,EAAOC,QAAU,WACf,OAAO,IAAIC,OAAOC,IAA0B,oC,iCCDvC,SAASC,EAAwB5B,GACtC,OAAQA,GACN,IAAM,aACJ,MAAO,KAET,IAAM,MACJ,MAAO,MAET,IAAM,OACJ,MAAO,OAET,IAAM,MACJ,MAAO,MAET,QACE,MAAO,OAKN,SAAS6B,EAAmBC,GAIjC,OAHkBA,EAASC,MAAM,iBAC7BD,EAASC,MAAM,iBAAiB,GAChC,MAEF,IAAM,QACJ,MAAO,OAET,IAAM,OACJ,MAAO,MAET,IAAM,MACJ,MAAO,aAET,IAAM,OACJ,MAAO,MAET,QACE,MAAM,IAAIC,MAAM,yBAtCtB,qE,oBCAAR,EAAOC,QAAU,WACf,OAAO,IAAIC,OAAOC,IAA0B,oC,sICCxCM,EAAS,CACbC,YAAa,kBA6BAC,EA1BO,SAAC,GAAqC,IAAnCpC,EAAkC,EAAlCA,QAASqC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC1C,OACE,yBAAKC,UAAU,YACb,2BAAOrC,KAAK,OAAOqC,UAAU,eAAeC,YAAY,UAAUC,UAAQ,IAExEC,OAAOC,KAAK3C,GAAS4C,OAAS,GAC5B,yBAAKL,UAAU,oBAEXG,OAAOC,KAAK3C,GAAS6C,KAAI,SAAAC,GAAG,OAC1B,yBAAKA,IAAKA,EAAKP,UAAU,gCACvB,2BACErC,KAAK,WAAWqC,UAAU,uBAAuBQ,GAAG,gBAAgB1C,MAAOyC,EAC3EE,QAAShD,EAAQ8C,GACjBT,SAAUA,EACVC,SAAUA,IAEZ,2BAAOC,UAAU,uBAAuBU,QAAQ,iBAAiBf,EAAOY,WCX3EI,EATM,SAAC,GAAyB,IAAvB1C,EAAsB,EAAtBA,MAAO8B,EAAe,EAAfA,SAC7B,OACE,4BAAQC,UAAU,eAAelC,MAAOG,EAAO8B,SAAUA,GACvD,4BAAQjC,MAAM,MAAd,MACA,4BAAQA,MAAM,WAAd,aCQS8C,EAZK,SAAC,GAAkC,IAAhCd,EAA+B,EAA/BA,SAAUpC,EAAqB,EAArBA,KAAMqC,EAAe,EAAfA,SACrC,OACE,4BACEC,UAAU,eAAelC,MAAOJ,EAAMqC,SAAUA,EAAUD,SAAUA,GAEpE,4BAAQhC,MAAM,cAAd,gBCMS+C,EAXI,SAAC,GAAuC,IAArCtC,EAAoC,EAApCA,KAAMuC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WACvC,OAAOxC,IAASA,EAAKyC,UACnB,4BAAQhB,UAAU,4BAA4BiB,QAASH,GAAvD,eAEA,yBAAKd,UAAU,eACb,2BAAOrC,KAAK,OAAOqC,UAAU,oBAAoBQ,GAAG,aAAaT,SAAUgB,IAC3E,2BAAOf,UAAU,oBAAoBU,QAAQ,cAA7C,iBCNAQ,EAAe,CAAC,MAAO,OAAQ,cAqBtBC,EAnBY,SAAC,GAA8C,IAA5C/C,EAA2C,EAA3CA,OAAQgD,EAAmC,EAAnCA,WAAY/C,EAAuB,EAAvBA,iBAChD,OACE,yBAAK2B,UAAU,UACZG,OAAOC,KAAKhC,GAAQiD,QAAO,SAAAd,GAAG,OAAIW,EAAaI,SAASf,MACtDD,KAAI,SAACC,GACJ,OACE,4BACEP,UAAWoB,IAAeb,EAAM,eAAiB,gBACjDA,IAAKA,EACLzC,MAAOyC,EACPU,QAAS,SAACM,GAAD,OAAWlD,EAAiBkD,EAAMC,OAAO1D,SAClDyC,Q,yjBC4ICkB,uBAvBS,SAAC,GAAD,MAQjB,CAAEhE,QARe,EACtBA,QAOgBiE,MARM,EAEtBA,MAMuBhE,KARD,EAGtBA,KAK6BO,MARP,EAItBA,MAIoCG,OARd,EAKtBA,OAG4CgD,WARtB,EAMtBA,WAEwD7C,KARlC,EAOtBA,SAEyB,SAAAoD,GACzB,MAAO,CACLnE,cAAeoE,YAAmBpE,IAAemE,GACjDzD,aAAc0D,YAAmB1D,IAAcyD,GAC/C5D,WAAY6D,YAAmB7D,IAAY4D,GAC3C3D,YAAa4D,YAAmB5D,IAAa2D,GAC7C9D,YAAa+D,YAAmB/D,IAAa8D,GAC7CxD,aAAcyD,YAAmBzD,IAAcwD,GAC/CtD,iBAAkBuD,YAAmBvD,IAAkBsD,GACvDrD,SAAUsD,YAAmBtD,IAAUqD,GACvCnD,UAAWoD,YAAmBpD,IAAWmD,MAI9BF,EAnIC,SAAC,GAiBV,IAhBLhE,EAgBI,EAhBJA,QACAiE,EAeI,EAfJA,MACAhE,EAcI,EAdJA,KACAO,EAaI,EAbJA,MACAG,EAYI,EAZJA,OACAgD,EAWI,EAXJA,WACA7C,EAUI,EAVJA,KACAL,EASI,EATJA,aACAL,EAQI,EARJA,YACAL,EAOI,EAPJA,cACAO,EAMI,EANJA,WACAC,EAKI,EALJA,YACAG,EAII,EAJJA,aACAE,EAGI,EAHJA,iBACAC,EAEI,EAFJA,SACAE,EACI,EADJA,UAEMqD,EAAuB,SAAC7C,GAC5B,IAAMZ,EAASY,EAAE8C,KACjB3D,EAAaC,GACbC,EAAiB8B,OAAOC,KAAKhC,GAAQ,KAsEvC,OACE,yBAAK4B,UAAU,QACb,yBAAKA,UAAU,sBACb,kBAAC,EAAD,CAAaF,SAAUvB,EAAMb,KAAMA,EAAMqC,SAtCrB,SAACwB,GACzBxD,EAAWwD,EAAMC,OAAO1D,OACxBI,IACAO,YAAkB,CAChBiD,MAAOA,EAAMH,EAAMC,OAAO1D,OAC1BJ,KAAM6D,EAAMC,OAAO1D,MACnBL,QAASA,EAAQC,IAChBmE,MAgCC,kBAAC,EAAD,CAAc5D,MAAOA,EAAO8B,SAAU,SAACwB,GAAD,OAAWvD,EAAYuD,EAAMC,OAAO1D,UAC1E,kBAAC,EAAD,CACEL,QAASA,EAAQC,GACjBoC,SAAU1B,EAAO4C,UACjBjB,SAlC2B,SAACwB,GAClC,IAAMQ,EAAU,KAAQtE,EAAQC,IAChCqE,EAAWR,EAAMC,OAAO1D,QAAUiE,EAAWR,EAAMC,OAAO1D,OAC1DN,EAAcuE,EAAYrE,GAC1BQ,IACAO,YAAkB,CAChBiD,MAAOA,EAAMhE,GACbA,OACAD,QAASsE,GACRF,MA2BC,kBAAC,EAAD,CAAYtD,KAAMA,EAAMuC,YAzBN,WACtB,IAAMkB,EAAYC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,UACnDX,EAAQM,EAAUN,OAASY,IAAeZ,MAC1ChE,EAAOsE,EAAUtE,MAAQ4E,IAAe5E,KAC9Cc,IACAX,EAAY6D,GACZ3D,EAAWL,GACXQ,IACAO,YAAkB,CAChBiD,MAAOA,EAAMhE,GACbA,OACAD,QAASA,EAAQC,IAChBmE,IAauDd,WA9ErC,SAAC/B,GACtB,GAAKA,EAAEwC,OAAOe,MAAM,GAApB,CAGA,IACIC,EADEjE,EAAOS,EAAEwC,OAAOe,MAAM,GAE5B,IACEC,EAAWjD,YAAkBhB,EAAKkE,MAClC,MAAOzD,GAEP,YADA0D,MAAM1D,EAAEN,SAGVJ,EAASC,GACTV,EAAY,EAAD,GAAM6D,EAAN,CAAaV,WAAW,KACnC,IAAMpC,EAAS,IAAI+D,IACnB/D,EAAOE,YAAY,CAAEP,SACrBK,EAAOG,UAAY,YAAe,IAAZ+C,EAAW,EAAXA,KACpBlD,EAAOK,YACPpB,EAAY,EAAD,GAAM6D,EAAN,CAAaV,WAAW,KACnCnD,EAAYiE,EAAMU,GAClBzE,EAAWyE,GACXtE,IACAO,YAAkB,CAChBiD,MAAOI,EACPpE,KAAM8E,EACN/E,QAASA,EAAQ+E,IAChBX,IAELjD,EAAOgE,QAAU,SAAC5D,GAChBR,IACAkE,MAAM1D,EAAEN,eAkDR,kBAAC,EAAD,CAAoBN,OAAQA,EAAQgD,WAAYA,EAAY/C,iBAAkBA","file":"static/js/4.1dc9c84b.chunk.js","sourcesContent":["export function updateOptions (options, lang) {\r\n  return {\r\n    type: 'UPDATE_OPTIONS',\r\n    payload: { options, lang }\r\n  }\r\n}\r\n\r\nexport function updateInput (value, lang) {\r\n  return {\r\n    type: 'UPDATE_INPUT',\r\n    payload: { value, lang }\r\n  }\r\n}\r\n\r\nexport function updateLang (lang) {\r\n  return {\r\n    type: 'UPDATE_LANG',\r\n    payload: lang\r\n  }\r\n}\r\n\r\nexport function updateTheme (theme) {\r\n  return {\r\n    type: 'UPDATE_THEME',\r\n    payload: theme\r\n  }\r\n}\r\n\r\nexport function startParsing () {\r\n  return {\r\n    type: 'START_PARSING'\r\n  }\r\n}\r\n\r\nexport function updateOutput (output) {\r\n  return {\r\n    type: 'UPDATE_OUTPUT',\r\n    payload: output\r\n  }\r\n}\r\n\r\nexport function updateOutputType (type) {\r\n  return {\r\n    type: 'UPDATE_OUTPUT_TYPE',\r\n    payload: type\r\n  }\r\n}\r\n\r\nexport function loadFile (file) {\r\n  return {\r\n    type: 'LOAD_FILE',\r\n    payload: file\r\n  }\r\n}\r\n\r\nexport function closeFile () {\r\n  return {\r\n    type: 'CLOSE_FILE'\r\n  }\r\n}\r\n","import ParserWorker from '../workers/parser.worker'\r\n\r\nexport default function startParserWorker (message, callback) {\r\n  const worker = new ParserWorker()\r\n  worker.postMessage(message)\r\n  worker.onmessage = (e) => {\r\n    callback(e)\r\n    worker.terminate()\r\n  }\r\n}\r\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"a9936286fa40c90f863e.worker.js\");\n};","export function getFileExtensionByLang (lang) {\r\n  switch (lang) {\r\n    case ('javascript'): {\r\n      return 'js'\r\n    }\r\n    case ('php'): {\r\n      return 'php'\r\n    }\r\n    case ('json'): {\r\n      return 'json'\r\n    }\r\n    case ('xml'): {\r\n      return 'xml'\r\n    }\r\n    default: {\r\n      return 'txt'\r\n    }\r\n  }\r\n}\r\n\r\nexport function getLangByFileName (fileName) {\r\n  const extension = fileName.match(/\\.[0-9a-z]+$/i)\r\n    ? fileName.match(/\\.[0-9a-z]+$/i)[0]\r\n    : null\r\n  switch (extension) {\r\n    case ('.json'): {\r\n      return 'json'\r\n    }\r\n    case ('.xml'): {\r\n      return 'xml'\r\n    }\r\n    case ('.js'): {\r\n      return 'javascript'\r\n    }\r\n    case ('.php'): {\r\n      return 'php'\r\n    }\r\n    default: {\r\n      throw new Error('Can\\'t read this file')\r\n    }\r\n  }\r\n}\r\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"da9463a9116322ff0b90.worker.js\");\n};","import React from 'react'\r\n\r\nconst keyMap = {\r\n  retainLines: 'Save codelines'\r\n}\r\n\r\nconst ParserOptions = ({ options, disabled, onChange }) => {\r\n  return (\r\n    <div className='dropdown'>\r\n      <input type='text' className='form-control' placeholder='Options' readOnly />\r\n      {\r\n        Object.keys(options).length > 0 &&\r\n          <div className='dropdown-content'>\r\n            {\r\n              Object.keys(options).map(key => (\r\n                <div key={key} className='custom-control custom-switch'>\r\n                  <input\r\n                    type='checkbox' className='custom-control-input' id='customSwitch1' value={key}\r\n                    checked={options[key]}\r\n                    disabled={disabled}\r\n                    onChange={onChange}\r\n                  />\r\n                  <label className='custom-control-label' htmlFor='customSwitch1'>{keyMap[key]}</label>\r\n                </div>\r\n              ))\r\n            }\r\n          </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ParserOptions\r\n","import React from 'react'\r\n\r\nconst ThemeOptions = ({ theme, onChange }) => {\r\n  return (\r\n    <select className='form-control' value={theme} onChange={onChange}>\r\n      <option value='vs'>vs</option>\r\n      <option value='vs-dark'>vs-dark</option>\r\n    </select>\r\n  )\r\n}\r\n\r\nexport default ThemeOptions\r\n","import React from 'react'\r\n\r\nconst LangOptions = ({ disabled, lang, onChange }) => {\r\n  return (\r\n    <select\r\n      className='form-control' value={lang} onChange={onChange} disabled={disabled}\r\n    >\r\n      <option value='javascript'>javascript</option>\r\n      {/* <option value='php'>php</option>\r\n          <option value='java'>java</option> */}\r\n    </select>\r\n  )\r\n}\r\n\r\nexport default LangOptions\r\n","import React from 'react'\r\n\r\nconst FileLoader = ({ file, onCloseFile, onLoadFile }) => {\r\n  return file && !file.isLoading ? (\r\n    <button className='btn btn-danger close-file' onClick={onCloseFile}>Close file </button>\r\n  ) : (\r\n    <div className='custom-file'>\r\n      <input type='file' className='custom-file-input' id='customFile' onChange={onLoadFile} />\r\n      <label className='custom-file-label' htmlFor='customFile'>Choose file</label>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FileLoader\r\n","import React from 'react'\r\n\r\nconst allowedTypes = ['xml', 'json', 'javascript']\r\n\r\nconst OutputTypeSwitcher = ({ output, outputType, updateOutputType }) => {\r\n  return (\r\n    <div className='output'>\r\n      {Object.keys(output).filter(key => allowedTypes.includes(key))\r\n        .map((key) => {\r\n          return (\r\n            <button\r\n              className={outputType === key ? 'btn btn-dark' : 'btn btn-light'}\r\n              key={key}\r\n              value={key}\r\n              onClick={(event) => updateOutputType(event.target.value)}\r\n            >{key}\r\n            </button>\r\n          )\r\n        })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default OutputTypeSwitcher\r\n","import React from 'react'\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  updateOptions,\r\n  startParsing,\r\n  updateLang,\r\n  updateTheme,\r\n  updateOutput,\r\n  updateOutputType,\r\n  loadFile,\r\n  closeFile,\r\n  updateInput\r\n} from '../actions'\r\nimport FileLoaderWorker from '../workers/fileLoader.worker'\r\nimport startParserWorker from '../helpers/startParserWorker'\r\nimport { getLangByFileName } from '../helpers'\r\nimport preloadedState from '../helpers/preloadedState'\r\nimport ParserOptions from '../components/ParserOptions'\r\nimport ThemeOptions from '../components/ThemeOptions'\r\nimport LangOptions from '../components/LangOptions'\r\nimport FileLoader from '../components/FileLoader'\r\nimport OutputTypeSwitcher from '../components/OutputTypeSwitcher'\r\n\r\nconst MenuBar = ({\r\n  options,\r\n  input,\r\n  lang,\r\n  theme,\r\n  output,\r\n  outputType,\r\n  file,\r\n  startParsing,\r\n  updateInput,\r\n  updateOptions,\r\n  updateLang,\r\n  updateTheme,\r\n  updateOutput,\r\n  updateOutputType,\r\n  loadFile,\r\n  closeFile\r\n}) => {\r\n  const handleParserComplete = (e) => {\r\n    const output = e.data\r\n    updateOutput(output)\r\n    updateOutputType(Object.keys(output)[0])\r\n  }\r\n  const handleLoadFile = (e) => {\r\n    if (!e.target.files[0]) {\r\n      return\r\n    }\r\n    const file = e.target.files[0]\r\n    let fileLang\r\n    try {\r\n      fileLang = getLangByFileName(file.name)\r\n    } catch (e) {\r\n      alert(e.message)\r\n      return\r\n    }\r\n    loadFile(file)\r\n    updateInput({ ...input, isLoading: true })\r\n    const worker = new FileLoaderWorker()\r\n    worker.postMessage({ file })\r\n    worker.onmessage = ({ data }) => {\r\n      worker.terminate()\r\n      updateInput({ ...input, isLoading: false })\r\n      updateInput(data, fileLang)\r\n      updateLang(fileLang)\r\n      startParsing()\r\n      startParserWorker({\r\n        input: data,\r\n        lang: fileLang,\r\n        options: options[fileLang]\r\n      }, handleParserComplete)\r\n    }\r\n    worker.onerror = (e) => {\r\n      closeFile()\r\n      alert(e.message)\r\n    }\r\n  }\r\n  const handleLangChanged = (event) => {\r\n    updateLang(event.target.value)\r\n    startParsing()\r\n    startParserWorker({\r\n      input: input[event.target.value],\r\n      lang: event.target.value,\r\n      options: options[lang]\r\n    }, handleParserComplete)\r\n  }\r\n  const handleParserOptionsChanged = (event) => {\r\n    const newOptions = { ...options[lang] }\r\n    newOptions[event.target.value] = !newOptions[event.target.value]\r\n    updateOptions(newOptions, lang)\r\n    startParsing()\r\n    startParserWorker({\r\n      input: input[lang],\r\n      lang,\r\n      options: newOptions\r\n    }, handleParserComplete)\r\n  }\r\n  const handleCloseFile = () => {\r\n    const prevState = JSON.parse(window.localStorage.getItem('state'))\r\n    const input = prevState.input || preloadedState.input\r\n    const lang = prevState.lang || preloadedState.lang\r\n    closeFile()\r\n    updateInput(input)\r\n    updateLang(lang)\r\n    startParsing()\r\n    startParserWorker({\r\n      input: input[lang],\r\n      lang,\r\n      options: options[lang]\r\n    }, handleParserComplete)\r\n  }\r\n\r\n  return (\r\n    <div className='menu'>\r\n      <div className='options form-group'>\r\n        <LangOptions disabled={file} lang={lang} onChange={handleLangChanged} />\r\n        <ThemeOptions theme={theme} onChange={(event) => updateTheme(event.target.value)} />\r\n        <ParserOptions\r\n          options={options[lang]}\r\n          disabled={output.isLoading}\r\n          onChange={handleParserOptionsChanged}\r\n        />\r\n        <FileLoader file={file} onCloseFile={handleCloseFile} onLoadFile={handleLoadFile} />\r\n      </div>\r\n      <OutputTypeSwitcher output={output} outputType={outputType} updateOutputType={updateOutputType} />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = ({\r\n  options,\r\n  input,\r\n  lang,\r\n  theme,\r\n  output,\r\n  outputType,\r\n  file\r\n}) => ({ options, input, lang, theme, output, outputType, file })\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    updateOptions: bindActionCreators(updateOptions, dispatch),\r\n    startParsing: bindActionCreators(startParsing, dispatch),\r\n    updateLang: bindActionCreators(updateLang, dispatch),\r\n    updateTheme: bindActionCreators(updateTheme, dispatch),\r\n    updateInput: bindActionCreators(updateInput, dispatch),\r\n    updateOutput: bindActionCreators(updateOutput, dispatch),\r\n    updateOutputType: bindActionCreators(updateOutputType, dispatch),\r\n    loadFile: bindActionCreators(loadFile, dispatch),\r\n    closeFile: bindActionCreators(closeFile, dispatch)\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuBar)\r\n"],"sourceRoot":""}