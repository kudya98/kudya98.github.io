{"version":3,"sources":["actions/index.js","helpers/startParserWorker.js","workers/parser.worker.js","config/editors.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","containers/InputWindow.js"],"names":["updateOptions","options","lang","type","payload","updateInput","value","updateLang","updateTheme","theme","startParsing","updateOutput","output","updateOutputType","loadFile","file","closeFile","startParserWorker","message","callback","worker","ParserWorker","postMessage","onmessage","e","terminate","module","exports","Worker","__webpack_public_path__","inputEditorOptions","minimap","enabled","scrollBeyondLastLine","outputEditorOptions","lineNumbers","readOnly","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","TypeError","connect","input","dispatch","bindActionCreators","useState","timer","setTimer","useEffect","data","className","isLoading","language","onChange","newValue","clearTimeout","setTimeout","handleChange","editorDidMount","editor","window","addEventListener","layout","focus"],"mappings":"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","file":"static/js/5.6b89377e.chunk.js","sourcesContent":["export function updateOptions (options, lang) {\r\n  return {\r\n    type: 'UPDATE_OPTIONS',\r\n    payload: { options, lang }\r\n  }\r\n}\r\n\r\nexport function updateInput (value, lang) {\r\n  return {\r\n    type: 'UPDATE_INPUT',\r\n    payload: { value, lang }\r\n  }\r\n}\r\n\r\nexport function updateLang (lang) {\r\n  return {\r\n    type: 'UPDATE_LANG',\r\n    payload: lang\r\n  }\r\n}\r\n\r\nexport function updateTheme (theme) {\r\n  return {\r\n    type: 'UPDATE_THEME',\r\n    payload: theme\r\n  }\r\n}\r\n\r\nexport function startParsing () {\r\n  return {\r\n    type: 'START_PARSING'\r\n  }\r\n}\r\n\r\nexport function updateOutput (output) {\r\n  return {\r\n    type: 'UPDATE_OUTPUT',\r\n    payload: output\r\n  }\r\n}\r\n\r\nexport function updateOutputType (type) {\r\n  return {\r\n    type: 'UPDATE_OUTPUT_TYPE',\r\n    payload: type\r\n  }\r\n}\r\n\r\nexport function loadFile (file) {\r\n  return {\r\n    type: 'LOAD_FILE',\r\n    payload: file\r\n  }\r\n}\r\n\r\nexport function closeFile () {\r\n  return {\r\n    type: 'CLOSE_FILE'\r\n  }\r\n}\r\n","import ParserWorker from '../workers/parser.worker'\r\n\r\nexport default function startParserWorker (message, callback) {\r\n  const worker = new ParserWorker()\r\n  worker.postMessage(message)\r\n  worker.onmessage = (e) => {\r\n    callback(e)\r\n    worker.terminate()\r\n  }\r\n}\r\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"8e2c4e134504976c6d8a.worker.js\");\n};","export const inputEditorOptions = {\r\n  minimap: {\r\n    enabled: false\r\n  },\r\n  scrollBeyondLastLine: false\r\n}\r\n\r\nexport const outputEditorOptions = {\r\n  minimap: {\r\n    enabled: false\r\n  },\r\n  lineNumbers: 'on',\r\n  scrollBeyondLastLine: false,\r\n  readOnly: true\r\n}\r\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import React, { useState, useEffect } from 'react'\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport MonacoEditor from 'react-monaco-editor'\r\nimport { startParsing, updateInput, updateOutput, updateOutputType } from '../actions'\r\nimport startParserWorker from '../helpers/startParserWorker'\r\nimport { inputEditorOptions } from '../config/editors'\r\n\r\nconst DEFAULT_TIMEOUT = 200\r\n\r\nconst InputWindow = ({\r\n  options,\r\n  input,\r\n  lang,\r\n  theme,\r\n  file,\r\n  startParsing,\r\n  updateInput,\r\n  updateOutput,\r\n  updateOutputType\r\n}) => {\r\n  const [timer, setTimer] = useState(null)\r\n  const handleChange = (newValue) => {\r\n    startParsing()\r\n    startParserWorker({\r\n      input: newValue,\r\n      lang,\r\n      options: options[lang]\r\n    }, (e) => {\r\n      const output = e.data\r\n      updateOutput(output)\r\n    })\r\n  }\r\n  useEffect(() => {\r\n    startParsing()\r\n    startParserWorker({\r\n      input: input[lang],\r\n      lang,\r\n      options: options[lang]\r\n    }, (e) => {\r\n      const output = e.data\r\n      updateOutput(output)\r\n      updateOutputType('json')\r\n    })\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  return (\r\n    <div className={input.isLoading ? 'input loading' : 'input'}>\r\n      <MonacoEditor\r\n        language={lang}\r\n        theme={theme}\r\n        value={input[lang]}\r\n        options={file ? { ...inputEditorOptions, readOnly: true } : { ...inputEditorOptions, readOnly: false }}\r\n        onChange={(newValue) => {\r\n          updateInput(newValue, lang)\r\n          clearTimeout(timer)\r\n          setTimer(setTimeout(() => handleChange(newValue), DEFAULT_TIMEOUT))\r\n        }}\r\n        editorDidMount={(editor) => {\r\n          window.addEventListener('resize', () => editor.layout())\r\n          editor.focus()\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = ({ options, input, lang, theme, file }) => ({ options, input, lang, theme, file })\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    startParsing: bindActionCreators(startParsing, dispatch),\r\n    updateInput: bindActionCreators(updateInput, dispatch),\r\n    updateOutput: bindActionCreators(updateOutput, dispatch),\r\n    updateOutputType: bindActionCreators(updateOutputType, dispatch)\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InputWindow)\r\n"],"sourceRoot":""}