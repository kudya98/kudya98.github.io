{"version":3,"sources":["actions/index.js","helpers/startParserWorker.js","parsers/parser.worker.js","helpers/index.js","containers/MenuBar.js"],"names":["updateInput","value","lang","type","payload","updateLang","updateTheme","theme","startParsing","updateOutput","output","updateOutputType","openFile","file","closeFile","startParserWorker","message","callback","worker","ParserWorker","postMessage","onmessage","e","terminate","module","exports","Worker","__webpack_public_path__","getFileExtensionByLang","getLangByFileName","fileName","match","Error","connect","input","outputType","dispatch","bindActionCreators","className","onChange","event","target","data","id","files","name","reader","FileReader","onload","alert","result","Object","keys","readAsText","handleLoadFile","htmlFor","onClick","map","key"],"mappings":"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","file":"static/js/5.4f61946f.chunk.js","sourcesContent":["export function updateInput (value, lang) {\r\n  return {\r\n    type: 'UPDATE_INPUT',\r\n    payload: { value, lang }\r\n  }\r\n}\r\n\r\nexport function updateLang (lang) {\r\n  return {\r\n    type: 'UPDATE_LANG',\r\n    payload: lang\r\n  }\r\n}\r\n\r\nexport function updateTheme (theme) {\r\n  return {\r\n    type: 'UPDATE_THEME',\r\n    payload: theme\r\n  }\r\n}\r\n\r\nexport function startParsing () {\r\n  return {\r\n    type: 'START_PARSING'\r\n  }\r\n}\r\n\r\nexport function updateOutput (output) {\r\n  return {\r\n    type: 'UPDATE_OUTPUT',\r\n    payload: output\r\n  }\r\n}\r\n\r\nexport function updateOutputType (type) {\r\n  return {\r\n    type: 'UPDATE_OUTPUT_TYPE',\r\n    payload: type\r\n  }\r\n}\r\n\r\nexport function openFile (file) {\r\n  return {\r\n    type: 'OPEN_FILE',\r\n    payload: file\r\n  }\r\n}\r\n\r\nexport function closeFile () {\r\n  return {\r\n    type: 'CLOSE_FILE'\r\n  }\r\n}\r\n","import ParserWorker from '../parsers/parser.worker'\r\n\r\nexport default function startParserWorker (message, callback) {\r\n  const worker = new ParserWorker()\r\n  worker.postMessage(message)\r\n  worker.onmessage = (e) => {\r\n    callback(e)\r\n    worker.terminate()\r\n  }\r\n}\r\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"45cbc0cc3831bacb29cd.worker.js\");\n};","export function getFileExtensionByLang (lang) {\r\n  switch (lang) {\r\n    case ('javascript'): {\r\n      return 'js'\r\n    }\r\n    case ('php'): {\r\n      return 'php'\r\n    }\r\n    case ('json'): {\r\n      return 'json'\r\n    }\r\n    case ('xml'): {\r\n      return 'xml'\r\n    }\r\n    default: {\r\n      return 'txt'\r\n    }\r\n  }\r\n}\r\n\r\nexport function getLangByFileName (fileName) {\r\n  const extension = fileName.match(/\\.[0-9a-z]+$/i)\r\n    ? fileName.match(/\\.[0-9a-z]+$/i)[0]\r\n    : null\r\n  switch (extension) {\r\n    case ('.json'): {\r\n      return 'json'\r\n    }\r\n    case ('.xml'): {\r\n      return 'xml'\r\n    }\r\n    case ('.js'): {\r\n      return 'javascript'\r\n    }\r\n    case ('.php'): {\r\n      return 'php'\r\n    }\r\n    default: {\r\n      throw new Error('Can\\'t read this file')\r\n    }\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { startParsing, updateLang, updateTheme, updateOutput, updateOutputType, openFile, closeFile } from '../actions'\r\nimport startParserWorker from '../helpers/startParserWorker'\r\nimport { getLangByFileName } from '../helpers'\r\n\r\nconst MenuBar = ({\r\n  input,\r\n  lang,\r\n  theme,\r\n  output,\r\n  outputType,\r\n  file,\r\n  startParsing,\r\n  updateLang,\r\n  updateTheme,\r\n  updateOutput,\r\n  updateOutputType,\r\n  openFile,\r\n  closeFile\r\n}) => {\r\n  const handleLoadFile = (e) => {\r\n    if (!e.target.files[0]) {\r\n      return\r\n    }\r\n    const file = e.target.files[0]\r\n    const { name } = e.target.files[0]\r\n    const reader = new FileReader()\r\n    reader.onload = (event) => {\r\n      let lang\r\n      try {\r\n        lang = getLangByFileName(name)\r\n      } catch (e) {\r\n        alert(e.message)\r\n        return\r\n      }\r\n      const { result } = event.target\r\n      openFile({ name, result, lang })\r\n      startParsing()\r\n      startParserWorker({\r\n        input: result,\r\n        lang\r\n      }, (e) => {\r\n        const output = e.data\r\n        updateOutput(output)\r\n        updateOutputType(Object.keys(output)[0])\r\n      })\r\n    }\r\n    try {\r\n      reader.readAsText(file)\r\n    } catch (e) {\r\n      alert(e.message)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='menu'>\r\n      <div className='options form-group'>\r\n        <select\r\n          className='form-control' value={lang} onChange={(event) => {\r\n            updateLang(event.target.value)\r\n            startParsing()\r\n            startParserWorker({\r\n              input: input[event.target.value],\r\n              lang: event.target.value\r\n            }, (e) => {\r\n              const output = e.data\r\n              updateOutput(output)\r\n            })\r\n          }}\r\n        >\r\n          <option value='javascript'>javascript</option>\r\n          {/* <option value='php'>php</option>\r\n          <option value='java'>java</option> */}\r\n        </select>\r\n        <select className='form-control' value={theme} onChange={(event) => updateTheme(event.target.value)}>\r\n          <option value='vs'>vs</option>\r\n          <option value='vs-dark'>vs-dark</option>\r\n        </select>\r\n        {!file &&\r\n          <div className='custom-file'>\r\n            <input type='file' className='custom-file-input' id='customFile' onChange={(e) => handleLoadFile(e)} />\r\n            <label className='custom-file-label' htmlFor='customFile'>Choose file</label>\r\n          </div>}\r\n        {file &&\r\n          <button\r\n            className='btn btn-danger' onClick={() => {\r\n              closeFile()\r\n              startParsing()\r\n              startParserWorker({\r\n                input: input[lang],\r\n                lang\r\n              }, (e) => {\r\n                const output = e.data\r\n                updateOutput(output)\r\n                updateOutputType('json')\r\n              })\r\n            }}\r\n          >Close file\r\n          </button>}\r\n      </div>\r\n      <div className='output'>\r\n        {Object.keys(output).map((key) => {\r\n          return key !== 'isLoading' && key !== 'error' && (\r\n            <button\r\n              className={outputType === key ? 'btn btn-dark' : 'btn btn-light'}\r\n              key={key}\r\n              value={key}\r\n              onClick={(event) => updateOutputType(event.target.value)}\r\n            >{key}\r\n            </button>\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = ({\r\n  input,\r\n  lang,\r\n  theme,\r\n  output,\r\n  outputType,\r\n  file\r\n}) => ({ input, lang, theme, output, outputType, file })\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    startParsing: bindActionCreators(startParsing, dispatch),\r\n    updateLang: bindActionCreators(updateLang, dispatch),\r\n    updateTheme: bindActionCreators(updateTheme, dispatch),\r\n    updateOutput: bindActionCreators(updateOutput, dispatch),\r\n    updateOutputType: bindActionCreators(updateOutputType, dispatch),\r\n    openFile: bindActionCreators(openFile, dispatch),\r\n    closeFile: bindActionCreators(closeFile, dispatch)\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuBar)\r\n"],"sourceRoot":""}