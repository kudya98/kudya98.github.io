{"version":3,"sources":["objects/Unit/Animations.ts","objects/Unit/Unit.ts","helpers/getAnimationName.ts","objects/Action.ts","objects/Weapon/Weapon.ts","helpers/lineCircle.ts","objects/Projectile/Projectile.ts","objects/Projectile/RifleBullet.ts","objects/Sounds.ts","objects/Weapon/Rifle.ts","objects/Projectile/ShotgunBullet.ts","objects/Weapon/Shotgun.ts","objects/Shader/Smoke.ts","objects/Shader/Shader.ts","objects/Projectile/RPGBullet.ts","objects/Weapon/RPG.ts","objects/Unit/Swat.ts","objects/Unit/HitBox.ts","objects/Unit/Zombie.ts","objects/Unit/ZombieFactory.ts","objects/World.ts","components/Renderer.tsx","helpers/modelLoader.ts","components/Hud.tsx","components/App.tsx","index.tsx"],"names":["Animations","unit","mixer","list","clips","current","this","THREE","model","animations","forEach","clip","action","clipAction","priority","isActive","name","dX","dZ","speed","setLoop","clampWhenFinished","currentAction","timeScale","hp","push","Object","assign","sortedAnimations","sort","a","b","currentAnimations","filter","animation","includes","play","stop","options","Unit","maxHp","position","actions","quadtreeIndex","rotationAngle","size","hpRegen","hitBox","world","tickTimestamp","timeout","World","getInstance","add","delta","nearObjects","keyMap","mousePosition","performance","now","update","remove","undefined","setTimeout","newHp","Number","toFixed","actionHandler","detectCollisions","updateActions","newPosition","x","z","Math","abs","rotation","set","units","collisions","length","handleCollision","obj1","obj2","dx","dz","dist","sqrt","nx","nz","touchDistFromObj1","contactX","contactZ","getAnimationName","filename","match","Action","start","complete","passedArgs","onComplete","duration","onStart","onStop","Infinity","args","Weapon","bullets","maxBullets","dot","v1","v2","DESTROY_TIMEOUT","Projectile","geometry","material","owner","direction","destroyTimeout","y","atan2","PI","rotateX","rotateZ","newX","newZ","x1","y1","x2","y2","xc","yc","rc","ac","ab","ab2","t","h","lineCircle","RifleBullet","vertexShader","document","getElementById","textContent","fragmentShader","color","glowGeometry","glowMaterial","uniforms","c","type","value","p","glowColor","viewVector","camera","side","blending","transparent","glow","handleCollisions","find","reset","Sounds","sounds","src","sound","url","Audio","volume","SOUNDS_LEVEL","pause","load","firerate","bulletSpeed","reloadDuration","accuracy","Rifle","setDuration","reinit","newDirection","clone","rotateAround","random","clear","Shotgun","i","ShotgunBullet","Smoke","smokeTexture","smokeGeometry","smokeMaterial","map","opacity","scale","RPGBullet","handleExplode","updateMaterial","distanceTo","distance","smoke","RPG","energy","energyRegen","runSpeed","runCost","Swat","maxEnergy","weapons","currentWeapon","weapon","newWeapon","normalize","w","s","d","r","lmb","shift","shiftUp","digits","actionsCooldown","run","shoot","reload","swapWeapon","indexOf","vector","cloneDeep","callback","loader","FBXLoader","modelPath","animationsPath","HitBox","hpPercent","max","Zombie","target","attackDuration","distanceToTraget","attackRange","damage","player","attack","vectorToTarget","spotDistance","pos1","pos2","ZombieFactory","models","zombie","SkeletonUtils","WORLD_SIZE","WORLD_QUADS_SIZE","SPAWN_INTERVAL","scene","width","height","spawnInterval","objects","shaders","quadtree","ground","instance","prepareCamera","projectiles","prepareMap","spawnPlayer","onkeydown","e","code","onkeyup","el","window","addEventListener","WheelEvent","deltaY","zoom","updateProjectionMatrix","preventDefault","button","mouse","clientX","clientY","raycaster","setFromCamera","objAtPoint","intersectObjects","obj","object","point","dispose","proj","shader","Array","isArray","children","child","maxUnits","angle","spawnRadius","cos","sin","spawnZombie","updateQuadTree","getNearObjects","projectile","swat","lookAt","light1","light2","light3","lights","background","background1","quads","j","currentIndex","aliveUnits","ceil","index","Renderer","setState","useState","isLoaded","setModels","ref","useRef","useEffect","loadModel","modelLoader","clientWidth","clientHeight","renderer","antialias","setSize","appendChild","domElement","render","timestamp","hasFocus","requestAnimationFrame","left","right","top","bottom","handleWindowResize","id","className","Hud","state","style","alt","min","defaultValue","onChange","App","ReactDOM"],"mappings":"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","file":"static/js/main.6ec41349.chunk.js","sourcesContent":["import * as THREE from 'three'\r\nimport Unit from './Unit'\r\n\r\ntype Animation = THREE.AnimationAction & {\r\n    priority: number\r\n    name: string\r\n    isActive: (unit: Unit) => boolean\r\n}\r\n\r\nexport default class Animations {\r\n    constructor(unit: Unit) {\r\n        this.mixer = new THREE.AnimationMixer(unit.model)\r\n        this.clips = unit.model.animations\r\n        this.list = []\r\n        this.current = []\r\n        this.clips.forEach(clip => {\r\n            const action = this.mixer.clipAction(clip)\r\n            let priority = 0\r\n            let isActive = (unit: Unit) => false\r\n            switch (clip.name) {\r\n                case 'idle': {\r\n                    priority = 1\r\n                    isActive = (unit: Unit) => unit.dX === 0 && unit.dZ === 0\r\n                    break\r\n                }\r\n                case 'walkbackward': {\r\n                    priority = 3\r\n                    isActive = (unit: Unit) => {\r\n                        return (unit.dX !== 0 || unit.dZ !== 0) && unit.dX ** 2 + unit.dZ ** 2 < unit.speed ** 2 - 10\r\n                    }\r\n                    break\r\n                }\r\n                case 'walkforward': {\r\n                    priority = 3\r\n                    isActive = (unit: Unit) => {\r\n                        return unit.dX ** 2 + unit.dZ ** 2 >= unit.speed ** 2 - 10\r\n                    }\r\n                    break\r\n                }\r\n                case 'shoot': {\r\n                    action.setLoop(THREE.LoopOnce, 1)\r\n                    action.clampWhenFinished = true\r\n                    priority = 2\r\n                    isActive = (unit: Unit) => {\r\n                        // eslint-disable-next-line\r\n                        return (unit.currentAction?.name === 'shoot')\r\n                    }\r\n                    break\r\n                }\r\n                case 'run': {\r\n                    priority = 4\r\n                    isActive = (unit: Unit) => {\r\n                        // eslint-disable-next-line\r\n                        return (unit.currentAction?.name === 'run')\r\n                    }\r\n                    break\r\n                }\r\n                case 'hit': {\r\n                    action.setLoop(THREE.LoopOnce, 1)\r\n                    action.timeScale = 3\r\n                    priority = 5\r\n                    isActive = () => false\r\n                    break\r\n                }\r\n                case 'attack': {\r\n                    action.setLoop(THREE.LoopOnce, 1)\r\n                    priority = 5\r\n                    isActive = (unit: Unit) => {\r\n                        // eslint-disable-next-line\r\n                        return (unit.currentAction?.name === 'attack')\r\n                    }\r\n                    break\r\n                }\r\n                case 'dying': {\r\n                    action.setLoop(THREE.LoopOnce, 1)\r\n                    action.clampWhenFinished = true\r\n                    priority = 6\r\n                    isActive = (unit: Unit) => {\r\n                        return unit.hp <= 0\r\n                    }\r\n                    break\r\n                }\r\n                default: {\r\n                    return\r\n                }\r\n            }\r\n            this.list.push(\r\n                Object.assign(action, {\r\n                    priority,\r\n                    name: clip.name,\r\n                    isActive,\r\n                }),\r\n            )\r\n        })\r\n    }\r\n    public play(unit: Unit) {\r\n        const sortedAnimations = this.list.sort((a, b) => {\r\n            if (b.isActive(unit) != a.isActive(unit)) {\r\n                return +b.isActive(unit) - +a.isActive(unit)\r\n            } else {\r\n                return b.priority - a.priority\r\n            }\r\n        })\r\n        const currentAnimations = sortedAnimations.filter(\r\n            animation => animation.priority === sortedAnimations[0].priority && animation.isActive(unit),\r\n        )\r\n\r\n        currentAnimations.forEach(animation => !this.current.includes(animation) && animation.play())\r\n        this.current.forEach(animation => !currentAnimations.includes(animation) && animation.stop())\r\n        this.current = currentAnimations\r\n    }\r\n    public mixer: THREE.AnimationMixer\r\n    public list: Array<Animation>\r\n    private clips: Array<THREE.AnimationClip>\r\n    private current: Array<Animation>\r\n}\r\n","import * as THREE from 'three'\r\nimport World, { IKeyMap } from '../World'\r\nimport Action from '../Action'\r\nimport Animations from './Animations'\r\nimport HitBox from './HitBox'\r\n\r\nconst options = {\r\n    disposeTimeout: 5000,\r\n}\r\n\r\nexport default abstract class Unit {\r\n    protected constructor(model: any) {\r\n        this.world = World.getInstance()\r\n        this.model = model\r\n        this.position = model.position\r\n        this.animations = new Animations(this)\r\n        //  if (this.isPlayer) this.aimTracer = new AimTracer(this)\r\n        this.world.add(this)\r\n    }\r\n    public update(delta: number, nearObjects: Unit[], keyMap: IKeyMap, mousePosition: THREE.Vector2): void {\r\n        this.tickTimestamp = performance.now()\r\n        if (this.hp <= 0) {\r\n            this.animations.play(this)\r\n            this.animations.mixer.update(delta / 1000)\r\n            if (this.hitBox) {\r\n                this.model.remove(this.hitBox)\r\n                this.hitBox = undefined\r\n            }\r\n            if (!this.timeout)\r\n                this.timeout = setTimeout(() => {\r\n                    this.world.remove(this)\r\n                }, options.disposeTimeout)\r\n            return\r\n        }\r\n        let newHp = Number((this.hp + this.hpRegen * (delta / 1000)).toFixed(2))\r\n        if (newHp > this.maxHp) newHp = this.maxHp\r\n        if (this.hitBox) this.hitBox.update(newHp)\r\n        this.hp = newHp\r\n        this.animations.mixer.update(delta / 1000)\r\n        this.actionHandler(delta, keyMap, mousePosition)\r\n        this.detectCollisions(nearObjects)\r\n        this.updateActions(delta)\r\n        this.animations.play(this)\r\n        const newPosition = {\r\n            x: this.position.x + this.dX * (delta / 1000),\r\n            z: this.position.z + this.dZ * (delta / 1000),\r\n        }\r\n        if (Math.abs(newPosition.x) < this.world.size / 2 && Math.abs(newPosition.z) < this.world.size / 2) {\r\n            this.position.x = newPosition.x\r\n            this.position.z = newPosition.z\r\n        }\r\n        this.model.rotation.set(0, this.rotationAngle, 0)\r\n    }\r\n    public abstract maxHp: number\r\n    public abstract hp: number\r\n    public abstract speed: number\r\n    public position: THREE.Vector3\r\n    public actions: Action[] = []\r\n    public model: THREE.Group & { animations: any }\r\n    public currentAction?: Action\r\n    public quadtreeIndex?: number\r\n    public rotationAngle = 0\r\n    public size = 50\r\n    public dX = 0\r\n    public dZ = 0\r\n    public animations: Animations\r\n    protected abstract actionHandler(...args: any): void\r\n    protected abstract updateActions(delta: number): void\r\n    protected abstract hpRegen: number\r\n    protected hitBox?: HitBox\r\n    protected world: World\r\n    protected tickTimestamp?: number\r\n    private detectCollisions(units: Unit[]) {\r\n        const collisions = units.filter(\r\n            unit =>\r\n                this !== unit &&\r\n                (unit.position.x - this.position.x) ** 2 + (unit.position.z - this.position.z) ** 2 <\r\n                    this.size ** 2 + unit.size ** 2,\r\n        )\r\n        if (collisions.length) {\r\n            collisions.forEach(unit => {\r\n                Unit.handleCollision(this, unit)\r\n            })\r\n        }\r\n    }\r\n    private static handleCollision(obj1: Unit, obj2: Unit): void {\r\n        const dx = obj2.position.x - obj1.position.x\r\n        const dz = obj2.position.z - obj1.position.z\r\n        const dist = Math.sqrt(dx * dx + dz * dz)\r\n        if (obj1.size + obj2.size >= dist) {\r\n            const nx = dx / dist\r\n            const nz = dz / dist\r\n            const touchDistFromObj1 = dist * (obj1.size / (obj1.size + obj2.size))\r\n            const contactX = obj1.position.x + nx * touchDistFromObj1\r\n            const contactZ = obj1.position.z + nz * touchDistFromObj1\r\n\r\n            obj1.position.x = contactX - nx * obj1.size\r\n            obj1.position.z = contactZ - nz * obj1.size\r\n\r\n            obj2.position.x = contactX + nx * obj2.size\r\n            obj2.position.z = contactZ + nz * obj2.size\r\n        }\r\n    }\r\n\r\n    private timeout?: any\r\n}\r\n","export function getAnimationName(filename: string) {\r\n    if (filename.match(/(\\w+)\\.fbx/)) {\r\n        return filename.match(/(\\w+)\\.fbx/)![1]\r\n    } else {\r\n        return filename\r\n    }\r\n}\r\n","import Unit from './Unit/Unit'\r\n\r\ninterface IOptions {\r\n    name: string\r\n    duration?: number\r\n    unit: Unit\r\n    // возвращает true если успешно\r\n    onStart: (...args: any) => boolean\r\n    onComplete: (...args: any) => void\r\n    onStop: () => void\r\n}\r\n\r\nexport default class Action {\r\n    constructor(options: IOptions) {\r\n        const { name, unit, onStart, onStop, onComplete } = options\r\n        this.name = name\r\n        if (options.duration) {\r\n            this.duration = options.duration\r\n        } else {\r\n            this.duration = Infinity\r\n        }\r\n        this.start = (...args: any): boolean => {\r\n            if (unit.currentAction) {\r\n                if (unit.currentAction === this || unit.currentAction.duration === Infinity) {\r\n                    return false\r\n                }\r\n                unit.currentAction.stop()\r\n            }\r\n\r\n            if (onStart(...args)) {\r\n                unit.currentAction = this\r\n                this.onComplete = this.duration\r\n                this.passedArgs = args\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n        this.stop = () => {\r\n            onStop()\r\n            this.onComplete = 0\r\n            this.passedArgs = []\r\n            unit.currentAction = undefined\r\n        }\r\n        this.complete = () => {\r\n            onComplete(...this.passedArgs)\r\n            this.onComplete = 0\r\n            this.passedArgs = []\r\n            unit.currentAction = undefined\r\n        }\r\n    }\r\n    public update(delta: number) {\r\n        if (this.isActive()) {\r\n            if (this.onComplete !== Infinity) {\r\n                this.onComplete -= delta\r\n                if (!this.isActive()) this.complete()\r\n            }\r\n        }\r\n    }\r\n    public name: string\r\n    public start: (...args: any) => boolean\r\n    public complete: () => void\r\n    public stop: () => void\r\n    private passedArgs: any\r\n    private isActive() {\r\n        return this.onComplete > 0\r\n    }\r\n    private onComplete = 0\r\n    private duration: number\r\n}\r\n","import Action from '../Action'\r\n\r\nexport default abstract class Weapon {\r\n    protected constructor() {}\r\n    public abstract actions: Action[]\r\n    public abstract name: string\r\n    public abstract bullets: number\r\n    public abstract maxBullets: number\r\n}\r\n","// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\r\n// @ts-ignore\r\nexport function lineCircle(x1, y1, x2, y2, xc, yc, rc) {\r\n    const ac = [xc - x1, yc - y1]\r\n    const ab = [x2 - x1, y2 - y1]\r\n    const ab2 = dot(ab, ab)\r\n    const acab = dot(ac, ab)\r\n    let t = acab / ab2\r\n    t = t < 0 ? 0 : t\r\n    t = t > 1 ? 1 : t\r\n    const h = [ab[0] * t + x1 - xc, ab[1] * t + y1 - yc]\r\n    const h2 = dot(h, h)\r\n    return h2 <= rc * rc\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\r\n// @ts-ignore\r\nfunction dot(v1, v2) {\r\n    return v1[0] * v2[0] + v1[1] * v2[1]\r\n}\r\n","import * as THREE from 'three'\r\nimport Unit from '../Unit/Unit'\r\nimport World from '../World'\r\nimport { lineCircle } from '../../helpers/lineCircle'\r\n\r\nconst DESTROY_TIMEOUT = 2000\r\n\r\nexport interface IOptions {\r\n    speed: number\r\n}\r\n\r\nexport default abstract class Projectile extends THREE.Mesh {\r\n    protected constructor(\r\n        geometry: THREE.BufferGeometry,\r\n        material: THREE.Material,\r\n        owner: Unit,\r\n        direction: THREE.Vector2,\r\n        options: IOptions,\r\n    ) {\r\n        super(geometry, material)\r\n        this.owner = owner\r\n        this.world = World.getInstance()\r\n        //зависит от моделек\r\n        this.position.y = owner.position.y + 150\r\n        this.position.x = owner.position.x + owner.size * direction.x\r\n        this.position.z = owner.position.z + owner.size * direction.y\r\n        this.rotationAngle = Math.atan2(direction.y, direction.x) - Math.PI / 2\r\n        this.rotateX(Math.PI / 2)\r\n        this.rotateZ(this.rotationAngle)\r\n        this.dX = options.speed * direction.x\r\n        this.dZ = options.speed * direction.y\r\n        this.world.add(this)\r\n    }\r\n    public abstract update(delta: number, nearObjects: Unit[]): void\r\n    public quadtreeIndex?: number\r\n    protected world: World\r\n    protected dX: number\r\n    protected dZ: number\r\n    protected rotationAngle: number\r\n    protected owner: Unit\r\n    protected destroyTimeout = DESTROY_TIMEOUT\r\n    protected detectCollisions(units: Unit[], newX: number, newZ: number): Unit[] {\r\n        return units.filter(\r\n            unit =>\r\n                this.owner !== unit &&\r\n                lineCircle(this.position.x, this.position.z, newX, newZ, unit.position.x, unit.position.z, unit.size),\r\n        )\r\n    }\r\n}\r\n","import * as THREE from 'three'\r\nimport Projectile, { IOptions } from './Projectile'\r\nimport World from '../World'\r\nimport Unit from '../Unit/Unit'\r\n\r\nconst options = {\r\n    damage: 200,\r\n}\r\n\r\nexport default class RifleBullet extends Projectile {\r\n    constructor(owner: Unit, direction: THREE.Vector2, options: IOptions) {\r\n        const world = World.getInstance()\r\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\r\n        // @ts-ignore\r\n        const vertexShader = document.getElementById('vertexShader').textContent || undefined\r\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\r\n        // @ts-ignore\r\n        const fragmentShader = document.getElementById('fragmentShader').textContent || undefined\r\n        const geometry = new THREE.CylinderBufferGeometry(5, 5, 100)\r\n        const material = new THREE.MeshBasicMaterial({\r\n            color: 0xffffff,\r\n        })\r\n        super(geometry, material, owner, direction, options)\r\n        const glowGeometry = new THREE.CylinderBufferGeometry(7, 7, 125)\r\n        const glowMaterial = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                c: { type: 'f', value: 1 },\r\n                p: { type: 'f', value: 1.2 },\r\n                glowColor: { type: 'c', value: new THREE.Color(0x0000ff) },\r\n                viewVector: { type: 'v3', value: world.camera.position },\r\n            },\r\n            vertexShader,\r\n            fragmentShader,\r\n            side: THREE.FrontSide,\r\n            blending: THREE.AdditiveBlending,\r\n            transparent: true,\r\n        })\r\n        const glow = new THREE.Mesh(glowGeometry, glowMaterial)\r\n        this.add(glow)\r\n    }\r\n    public update(delta: number, nearObjects: Unit[]) {\r\n        if (this.destroyTimeout <= 0) {\r\n            this.world.remove(this)\r\n            return\r\n        }\r\n        this.destroyTimeout -= delta\r\n        const newX = this.position.x + this.dX * (delta / 1000)\r\n        const newZ = this.position.z + this.dZ * (delta / 1000)\r\n        const collisions = this.detectCollisions(nearObjects, newX, newZ)\r\n        this.handleCollisions(collisions)\r\n        this.position.x = newX\r\n        this.position.z = newZ\r\n    }\r\n    protected handleCollisions(collisions: Unit[]): void {\r\n        if (collisions.length) {\r\n            collisions.forEach(unit => {\r\n                unit.hp -= options.damage\r\n                unit.position.x += this.dX * 0.001\r\n                unit.position.z += this.dZ * 0.001\r\n                const animation = unit.animations.list.find(animation => animation.name === 'hit')\r\n                if (animation) {\r\n                    animation.reset()\r\n                    animation.play()\r\n                }\r\n            })\r\n            this.world.remove(this)\r\n        }\r\n    }\r\n}\r\n","import World from './World'\r\n\r\ninterface ISound {\r\n    url: string\r\n    name?: string\r\n}\r\n\r\ninterface ISoundsSrc {\r\n    [s: string]: HTMLAudioElement\r\n}\r\n\r\nexport default class Sounds {\r\n    constructor(sounds: ISound[]) {\r\n        sounds.forEach(sound => {\r\n            const name = sound.name || sound.url.match(/(\\w+)\\.wav|mp3/)![1]\r\n            this.src[name] = new Audio(sound.url)\r\n        })\r\n    }\r\n    public play(name: string) {\r\n        if (!this.src[name]) return\r\n        this.src[name].volume = World.SOUNDS_LEVEL\r\n        this.src[name].play()\r\n    }\r\n    public pause(name: string) {\r\n        if (!this.src[name]) return\r\n        this.src[name].pause()\r\n    }\r\n    public load(name: string) {\r\n        if (!this.src[name]) return\r\n        this.src[name].load()\r\n    }\r\n    public reinit(sound: ISound) {\r\n        const name = sound.name || sound.url.match(/(\\w+)\\.wav|mp3/)![1]\r\n        this.src[name] = new Audio(sound.url)\r\n    }\r\n    public clear(name: string) {\r\n        if (!this.src[name]) return\r\n        delete this.src[name]\r\n    }\r\n    private src: ISoundsSrc = {}\r\n}\r\n","import * as THREE from 'three'\r\nimport Weapon from './Weapon'\r\nimport Unit from '../Unit/Unit'\r\nimport Action from '../Action'\r\nimport RifleBullet from '../Projectile/RifleBullet'\r\nimport Sounds from '../Sounds'\r\n\r\nconst options = {\r\n    bullets: 30,\r\n    firerate: 12,\r\n    bulletSpeed: 4000,\r\n    reloadDuration: 2300,\r\n    accuracy: 1,\r\n}\r\n\r\nexport default class Rifle extends Weapon {\r\n    constructor(owner: Unit) {\r\n        super()\r\n        const duration = 1000 / options.firerate\r\n        const animation = owner.animations.list.find(animation => animation.name === 'shoot')\r\n        if (animation) animation.setDuration(duration / 1000)\r\n        this.name = 'Rifle'\r\n        this.sounds = new Sounds([\r\n            { url: 'sounds/rifle/shoot.wav' },\r\n            { url: 'sounds/rifle/reload.wav' },\r\n            { url: 'sounds/rifle/foley.wav' },\r\n        ])\r\n\r\n        this.bullets = this.maxBullets = options.bullets\r\n        this.actions = [\r\n            new Action({\r\n                name: 'shoot',\r\n                duration,\r\n                unit: owner,\r\n                onStart: (direction: THREE.Vector2): boolean => {\r\n                    if (this.bullets > 0) {\r\n                        this.sounds.play('shoot')\r\n                        this.sounds.reinit({ url: 'sounds/rifle/shoot.wav' })\r\n                        this.bullets--\r\n                        const newDirection = direction\r\n                            .clone()\r\n                            .rotateAround(new THREE.Vector2(0, 0), (Math.random() - 0.5) * (1 - options.accuracy))\r\n                        new RifleBullet(owner, newDirection, {\r\n                            speed: options.bulletSpeed,\r\n                        })\r\n                        return true\r\n                    } else {\r\n                        this.sounds.play('foley')\r\n                        this.sounds.clear('foley')\r\n                        return false\r\n                    }\r\n                },\r\n                onStop: () => {},\r\n                onComplete: () => {},\r\n            }),\r\n            new Action({\r\n                name: 'reload',\r\n                duration: options.reloadDuration,\r\n                unit: owner,\r\n                onStart: (): boolean => {\r\n                    if (this.bullets < this.maxBullets) {\r\n                        this.sounds.load('reload')\r\n                        this.sounds.play('reload')\r\n                        return true\r\n                    } else {\r\n                        return false\r\n                    }\r\n                },\r\n                onStop: () => {\r\n                    this.sounds.pause('reload')\r\n                },\r\n                onComplete: () => {\r\n                    this.bullets = this.maxBullets\r\n                    this.sounds.reinit({ url: 'sounds/rifle/foley.wav' })\r\n                    this.sounds.pause('reload')\r\n                },\r\n            }),\r\n        ]\r\n    }\r\n    public name: string\r\n    public actions: Action[]\r\n    public bullets: number\r\n    public maxBullets: number\r\n    private sounds: Sounds\r\n}\r\n","import * as THREE from 'three'\r\nimport Projectile, { IOptions } from './Projectile'\r\nimport Unit from '../Unit/Unit'\r\n\r\nconst options = {\r\n    damage: 40,\r\n}\r\n\r\nexport default class RifleBullet extends Projectile {\r\n    constructor(owner: Unit, direction: THREE.Vector2, options: IOptions) {\r\n        const geometry = new THREE.SphereBufferGeometry(5, 128, 128)\r\n        const material = new THREE.MeshBasicMaterial({\r\n            color: 0xffffff,\r\n        })\r\n        super(geometry, material, owner, direction, options)\r\n    }\r\n    public update(delta: number, nearObjects: Unit[]) {\r\n        if (this.destroyTimeout <= 0) {\r\n            this.world.remove(this)\r\n            return\r\n        }\r\n        this.destroyTimeout -= delta\r\n        const newX = this.position.x + this.dX * (delta / 1000)\r\n        const newZ = this.position.z + this.dZ * (delta / 1000)\r\n        const collisions = this.detectCollisions(nearObjects, newX, newZ)\r\n        this.handleCollisions(collisions)\r\n        this.position.x = newX\r\n        this.position.z = newZ\r\n    }\r\n    protected handleCollisions(collisions: Unit[]): void {\r\n        if (collisions.length) {\r\n            collisions.forEach(unit => {\r\n                unit.hp -= options.damage\r\n                unit.position.x += this.dX * 0.002\r\n                unit.position.z += this.dZ * 0.002\r\n                const animation = unit.animations.list.find(animation => animation.name === 'hit')\r\n                if (animation) {\r\n                    animation.reset()\r\n                    animation.play()\r\n                }\r\n                this.world.remove(this)\r\n            })\r\n        }\r\n    }\r\n}\r\n","import * as THREE from 'three'\r\nimport Weapon from './Weapon'\r\nimport Unit from '../Unit/Unit'\r\nimport Action from '../Action'\r\nimport ShotgunBullet from '../Projectile/ShotgunBullet'\r\nimport Sounds from '../Sounds'\r\n\r\nconst options = {\r\n    bullets: 7,\r\n    firerate: 2,\r\n    bulletSpeed: 1200,\r\n    reloadDuration: 500,\r\n}\r\n\r\nexport default class Shotgun extends Weapon {\r\n    constructor(owner: Unit) {\r\n        super()\r\n        const duration = 1000 / options.firerate\r\n        const animation = owner.animations.list.find(animation => animation.name === 'shoot')\r\n        if (animation) animation.setDuration(duration / 1000)\r\n        this.name = 'Shotgun'\r\n        this.sounds = new Sounds([{ url: 'sounds/shotgun/shoot.wav' }, { url: 'sounds/shotgun/reload.wav' }])\r\n\r\n        this.bullets = this.maxBullets = options.bullets\r\n        this.actions = [\r\n            new Action({\r\n                name: 'shoot',\r\n                duration,\r\n                unit: owner,\r\n                onStart: (direction: THREE.Vector2): boolean => {\r\n                    if (this.bullets > 0) {\r\n                        this.sounds.play('shoot')\r\n                        this.sounds.reinit({ url: 'sounds/shotgun/shoot.wav' })\r\n                        this.bullets--\r\n                        for (let i = -8; i < 9; i++) {\r\n                            const newDirection = direction\r\n                                .clone()\r\n                                .rotateAround(new THREE.Vector2(0, 0), 0.3 * (Math.random() - 0.5))\r\n                            new ShotgunBullet(owner, newDirection, {\r\n                                speed: options.bulletSpeed * (1 + 0.1 * Math.random()),\r\n                            })\r\n                        }\r\n                        return true\r\n                    } else {\r\n                        return false\r\n                    }\r\n                },\r\n                onStop: () => {},\r\n                onComplete: () => {},\r\n            }),\r\n            new Action({\r\n                name: 'reload',\r\n                duration: options.reloadDuration,\r\n                unit: owner,\r\n                onStart: (): boolean => {\r\n                    if (this.bullets < this.maxBullets) {\r\n                        this.sounds.load('reload')\r\n                        this.sounds.play('reload')\r\n                        return true\r\n                    } else {\r\n                        return false\r\n                    }\r\n                },\r\n                onStop: () => {\r\n                    this.sounds.pause('reload')\r\n                },\r\n                onComplete: () => {\r\n                    this.sounds.pause('reload')\r\n                    this.bullets++\r\n                },\r\n            }),\r\n        ]\r\n    }\r\n    public name: string\r\n    public actions: Action[]\r\n    public bullets: number\r\n    public maxBullets: number\r\n    private sounds: Sounds\r\n}\r\n","import * as THREE from 'three'\r\nimport Shader from './Shader'\r\nimport World from '../World'\r\n\r\nexport default class Smoke extends Shader {\r\n    constructor() {\r\n        const world = World.getInstance()\r\n        const smokeTexture = new THREE.TextureLoader().load('textures/smoke.png')\r\n        const smokeGeometry = new THREE.BoxBufferGeometry(50, 50, 1)\r\n        const smokeMaterial = new THREE.MeshBasicMaterial({\r\n            map: smokeTexture,\r\n            transparent: true,\r\n        })\r\n        super(smokeGeometry, smokeMaterial)\r\n    }\r\n    public update(delta: number) {\r\n        if (this.material instanceof THREE.Material) {\r\n            this.material.opacity -= delta / 1000\r\n            this.scale.set(this.scale.x + delta / 500, this.scale.y + delta / 500, 1)\r\n            if (this.material.opacity <= 0) {\r\n                const world = World.getInstance()\r\n                world.remove(this)\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as THREE from 'three'\r\nimport World from '../World'\r\n\r\nexport default abstract class Shader extends THREE.Mesh {\r\n    protected constructor(geometry: THREE.BufferGeometry, material: THREE.Material) {\r\n        const world = World.getInstance()\r\n        super(geometry, material)\r\n        world.add(this)\r\n    }\r\n    public abstract update(delta: number): void\r\n}\r\n","import * as THREE from 'three'\r\nimport Projectile, { IOptions } from './Projectile'\r\nimport Unit from '../Unit/Unit'\r\nimport Smoke from '../Shader/Smoke'\r\n\r\nconst options = {\r\n    damage: 1000,\r\n    explodeRadius: 500\r\n}\r\n\r\nexport default class RPGBullet extends Projectile {\r\n    constructor(owner: Unit, direction: THREE.Vector2, options: IOptions) {\r\n        const geometry = new THREE.SphereBufferGeometry(1, 128, 128)\r\n        const material = new THREE.MeshBasicMaterial({\r\n            color: 'white',\r\n        })\r\n        super(geometry, material, owner, direction, options)\r\n    }\r\n    public update(delta: number, nearObjects: Unit[]) {\r\n        if (this.destroyTimeout <= 0) {\r\n            this.handleExplode(nearObjects)\r\n            this.world.remove(this)\r\n            return\r\n        }\r\n        this.destroyTimeout -= delta\r\n        const newX = this.position.x + this.dX * (delta / 1000)\r\n        const newZ = this.position.z + this.dZ * (delta / 1000)\r\n        const collisions = this.detectCollisions(nearObjects, newX, newZ)\r\n        if (collisions.length) this.handleCollisions([this.owner, ...nearObjects])\r\n        this.position.x = newX\r\n        this.position.z = newZ\r\n        this.updateMaterial()\r\n    }\r\n    protected handleExplode(units: Unit[]) {\r\n        units.filter(unit => this.position.distanceTo(unit.position) < options.explodeRadius).forEach(\r\n            unit => {\r\n                const distance = this.position.distanceTo(unit.position)\r\n                unit.hp -= (1 - distance / options.explodeRadius) * options.damage\r\n            }\r\n        )\r\n    }\r\n    protected updateMaterial() {\r\n        const smoke = new Smoke()\r\n        smoke.rotateX(Math.PI / 2)\r\n        smoke.rotateZ(this.rotationAngle)\r\n        smoke.position.set(this.position.x, this.position.y, this.position.z)\r\n    }\r\n    protected handleCollisions(nearObjects: Unit[]): void {\r\n        this.handleExplode(nearObjects)\r\n        this.world.remove(this)\r\n    }\r\n}\r\n","import * as THREE from 'three'\r\nimport Weapon from './Weapon'\r\nimport Unit from '../Unit/Unit'\r\nimport Action from '../Action'\r\nimport RPGBullet from '../Projectile/RPGBullet'\r\nimport Sounds from '../Sounds'\r\n\r\nconst options = {\r\n    bullets: 1,\r\n    firerate: 1,\r\n    bulletSpeed: 1500,\r\n    reloadDuration: 30,\r\n   // reloadDuration: 3000,\r\n}\r\n\r\nexport default class RPG extends Weapon {\r\n    constructor(owner: Unit) {\r\n        super()\r\n        const duration = 1000 / options.firerate\r\n        const animation = owner.animations.list.find(animation => animation.name === 'shoot')\r\n        if (animation) animation.setDuration(duration / 1000)\r\n        this.name = 'RPG'\r\n        this.sounds = new Sounds([])\r\n        this.bullets = this.maxBullets = options.bullets\r\n\r\n        this.actions = [\r\n            new Action({\r\n                name: 'shoot',\r\n                duration,\r\n                unit: owner,\r\n                onStart: (direction: THREE.Vector2): boolean => {\r\n                    if (this.bullets > 0) {\r\n                        this.bullets--\r\n                        new RPGBullet(owner, direction, {\r\n                            speed: options.bulletSpeed,\r\n                        })\r\n                        return true\r\n                    } else {\r\n                        return false\r\n                    }\r\n                },\r\n                onStop: () => {},\r\n                onComplete: () => {},\r\n            }),\r\n            new Action({\r\n                name: 'reload',\r\n                duration: options.reloadDuration,\r\n                unit: owner,\r\n                onStart: (): boolean => {\r\n                    return this.bullets < this.maxBullets\r\n                },\r\n                onStop: () => {},\r\n                onComplete: () => {\r\n                    this.bullets = this.maxBullets\r\n                },\r\n            }),\r\n        ]\r\n    }\r\n    public name: string\r\n    public actions: Action[]\r\n    public bullets: number\r\n    public maxBullets: number\r\n    private sounds: Sounds\r\n}\r\n","import * as THREE from 'three'\r\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader'\r\nimport { cloneDeep } from 'lodash'\r\nimport Unit from './Unit'\r\nimport { getAnimationName } from '../../helpers/getAnimationName'\r\nimport Action from '../Action'\r\nimport World, { IKeyMap } from '../World'\r\nimport Rifle from '../Weapon/Rifle'\r\nimport Shotgun from '../Weapon/Shotgun'\r\nimport Weapon from '../Weapon/Weapon'\r\nimport RPG from '../Weapon/RPG'\r\n\r\nconst options = {\r\n    energy: 100,\r\n    hp: 1000,\r\n    energyRegen: 10,\r\n    hpRegen: 50,\r\n    speed: 400,\r\n    runSpeed: 800,\r\n    runCost: 30,\r\n}\r\n\r\nexport default class Swat extends Unit {\r\n    constructor(model: any, x: number, z: number) {\r\n        super(model)\r\n        this.energy = this.maxEnergy = options.energy\r\n        this.energyRegen = options.energyRegen\r\n        this.position.x = x\r\n        this.position.z = z\r\n        this.weapons = [new Rifle(this), new Shotgun(this), new RPG(this)]\r\n        this.currentWeapon = this.weapons[0]\r\n        this.actions = [\r\n            new Action({\r\n                name: 'run',\r\n                unit: this,\r\n                onStart: () => {\r\n                    this.speed = options.runSpeed\r\n                    this.energyRegen -= options.runCost\r\n                    return true\r\n                },\r\n                onStop: () => {\r\n                    this.energyRegen += options.runCost\r\n                    this.speed = options.speed\r\n                },\r\n                onComplete: () => {},\r\n            }),\r\n            new Action({\r\n                duration: 50,\r\n                name: 'swapweapon',\r\n                unit: this,\r\n                onStart: (weapon?: Weapon) => {\r\n                    return weapon !== undefined && weapon !== this.currentWeapon\r\n                },\r\n                onStop: () => {},\r\n                onComplete: (newWeapon: Weapon) => {\r\n                    this.currentWeapon = newWeapon\r\n                },\r\n            }),\r\n        ]\r\n    }\r\n    public energy: number\r\n    public maxEnergy: number\r\n    public weapons: Weapon[] = []\r\n    public currentWeapon: Weapon\r\n    public maxHp = options.hp\r\n    public hp = options.hp\r\n    public speed = options.speed\r\n    protected hpRegen = options.hpRegen\r\n    protected actionHandler(delta: number, keyMap: IKeyMap, mousePosition: THREE.Vector2) {\r\n        mousePosition.x += this.dX * (delta / 1000)\r\n        mousePosition.y += this.dZ * (delta / 1000)\r\n        const direction = new THREE.Vector2(\r\n            mousePosition.x - this.position.x,\r\n            mousePosition.y - this.position.z,\r\n        ).normalize()\r\n        const w = +keyMap['KeyW'] || 0\r\n        const s = +keyMap['KeyS'] || 0\r\n        const a = +keyMap['KeyA'] || 0\r\n        const d = +keyMap['KeyD'] || 0\r\n        const r = keyMap['KeyR']\r\n        const lmb = keyMap['ButtonLeft']\r\n        const shift = keyMap['ShiftLeft']\r\n        // const shiftDown = keyMap['ShiftLeft'] && !this.keyMap['ShiftLeft']\r\n        const shiftUp = !keyMap['ShiftLeft'] && this.keyMap['ShiftLeft']\r\n        const digits = [\r\n            keyMap['Digit1'] && !this.keyMap['Digit1'],\r\n            keyMap['Digit2'] && !this.keyMap['Digit2'],\r\n            keyMap['Digit3'] && !this.keyMap['Digit3'],\r\n        ]\r\n\r\n        // 1 action per tick\r\n        let actionsCooldown = false\r\n        const run = this.actions.find(action => action.name === 'run')\r\n        const shoot = this.currentWeapon.actions.find(action => action.name === 'shoot')\r\n        const reload = this.currentWeapon.actions.find(action => action.name === 'reload')\r\n        const swapWeapon = this.actions.find(action => action.name === 'swapweapon')\r\n        this.energy = Number((this.energy + this.energyRegen * (delta / 1000)).toFixed(2))\r\n        if (this.energy > this.maxEnergy) this.energy = this.maxEnergy\r\n        if (this.energy < 0) this.energy = 0\r\n\r\n        if (!actionsCooldown && swapWeapon && digits.includes(true)) {\r\n            const newWeapon = this.weapons[digits.indexOf(true)]\r\n            swapWeapon.start(newWeapon)\r\n            actionsCooldown = true\r\n        }\r\n        if (!actionsCooldown && r && reload) {\r\n            reload.start()\r\n            actionsCooldown = true\r\n        }\r\n        if (!actionsCooldown && lmb && shoot) {\r\n            shoot.start(direction)\r\n            actionsCooldown = true\r\n        }\r\n        if (run && this.currentAction === run && ((this.dX === 0 && this.dZ === 0) || shiftUp || this.energy <= 0)) {\r\n            run.stop()\r\n        }\r\n        if (w > s) {\r\n            if (run && !actionsCooldown && shift && this.energy > 10) {\r\n                run.start()\r\n            }\r\n            if (a === d) {\r\n                this.dX = this.speed * direction.x\r\n                this.dZ = this.speed * direction.y\r\n            } else {\r\n                const vector = direction.clone()\r\n                vector.rotateAround(new THREE.Vector2(0, 0), ((d - a) * Math.PI) / 4)\r\n                this.dX = this.speed * vector.x\r\n                this.dZ = this.speed * vector.y\r\n            }\r\n        } else if (w < s) {\r\n            if (a === d) {\r\n                this.dX = -0.5 * this.speed * direction.x\r\n                this.dZ = -0.5 * this.speed * direction.y\r\n            } else {\r\n                const vector = direction.clone()\r\n                vector.rotateAround(new THREE.Vector2(0, 0), ((a - d) * -3 * Math.PI) / 4)\r\n                this.dX = 0.5 * this.speed * vector.x\r\n                this.dZ = 0.5 * this.speed * vector.y\r\n            }\r\n        } else if (w === s) {\r\n            this.dX = this.dZ = 0\r\n        }\r\n        if (run && this.currentAction === run && this.energy < 0) {\r\n            run.stop()\r\n        }\r\n        this.rotationAngle = Math.atan2(direction.x, direction.y)\r\n        this.keyMap = cloneDeep(keyMap)\r\n    }\r\n    protected updateActions(delta: number) {\r\n        const actions: Action[] = [...this.actions]\r\n        actions.push(...this.currentWeapon.actions)\r\n        actions.forEach(action => action.update(delta))\r\n    }\r\n    // prev tick keymap\r\n    private keyMap: IKeyMap = {}\r\n    private energyRegen: number\r\n\r\n    public static loadModel(callback: (model: THREE.Group) => void) {\r\n        const loader = new FBXLoader()\r\n        loader.load(Swat.modelPath, (model: any) => {\r\n            model.animations = []\r\n            for (let i = 0; i < Swat.animationsPath.length; i++) {\r\n                loader.load(Swat.animationsPath[i], ({ animations }: any) => {\r\n                    animations[0].name = getAnimationName(Swat.animationsPath[i])\r\n                    model.animations.push(animations[0])\r\n                    if (model.animations.length === Swat.animationsPath.length) {\r\n                        callback(model)\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n    private static modelPath = 'textures/swat/model.fbx'\r\n    private static animationsPath: string[] = [\r\n        'textures/swat/idle.fbx',\r\n        'textures/swat/walkforward.fbx',\r\n        'textures/swat/walkbackward.fbx',\r\n        'textures/swat/shoot.fbx',\r\n        'textures/swat/run.fbx',\r\n        'textures/swat/dying.fbx',\r\n        'textures/swat/hit.fbx',\r\n    ]\r\n}\r\n","import * as THREE from 'three'\r\nimport Unit from './Unit'\r\n\r\nexport default class HitBox extends THREE.Mesh {\r\n    constructor(owner: Unit) {\r\n        const geometry = new THREE.BoxBufferGeometry(owner.size * 2, 20, 5)\r\n        const material = new THREE.MeshBasicMaterial({ color: 0xff0000 })\r\n        super(geometry, material)\r\n        this.owner = owner\r\n        this.position.y = 200\r\n        owner.model.add(this)\r\n    }\r\n    public update(newHp: number) {\r\n        if (this.owner.hp === newHp) {\r\n            return\r\n        }\r\n        if (this.material instanceof THREE.MeshBasicMaterial) {\r\n            const hpPercent = Math.max(newHp / this.owner.maxHp, 0)\r\n            //this.material.color.set(new THREE.Color(1 - hpPercent, hpPercent, 0))\r\n            this.scale.set(hpPercent, 1, 1)\r\n        }\r\n    }\r\n    private owner: Unit\r\n}\r\n","import * as THREE from 'three'\r\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader'\r\nimport Unit from './Unit'\r\nimport { getAnimationName } from '../../helpers/getAnimationName'\r\nimport Action from '../Action'\r\nimport HitBox from './HitBox'\r\n\r\ninterface IOptions {\r\n    hp: number\r\n    speed: number\r\n    hpRegen: number\r\n    damage: number\r\n    attackRange: number\r\n    attackDuration: number\r\n    spotDistance: number\r\n}\r\n\r\nexport default class Zombie extends Unit {\r\n    constructor(model: any, x: number, z: number, options: IOptions) {\r\n        super(model)\r\n        this.options = options\r\n        this.position.x = x\r\n        this.position.z = z\r\n        this.maxHp = this.options.hp\r\n        this.hp = this.options.hp\r\n        this.speed = this.options.speed\r\n        this.hpRegen = this.options.hpRegen\r\n        this.actions = [\r\n            new Action({\r\n                name: 'attack',\r\n                duration: options.attackDuration,\r\n                unit: this,\r\n                onStart: () => {\r\n                    return this.distanceToTraget() < this.options.attackRange\r\n                },\r\n                onStop: () => {},\r\n                onComplete: (target: Unit) => {\r\n                    if (this.distanceToTraget() < this.options.attackRange) {\r\n                        target.hp -= this.options.damage\r\n                        const animation = target.animations.list.find(animation => animation.name === 'hit')\r\n                        if (animation) {\r\n                            animation.reset()\r\n                            animation.play()\r\n                        }\r\n                    }\r\n                },\r\n            }),\r\n        ]\r\n        this.target = this.world.player\r\n        this.hitBox = new HitBox(this)\r\n    }\r\n\r\n    public updateTarget() {\r\n        this.target = this.world.player\r\n    }\r\n    public maxHp: number\r\n    public hp: number\r\n    public speed: number\r\n    protected hpRegen: number\r\n    protected updateActions(delta: number) {\r\n        this.actions.forEach(action => action.update(delta))\r\n    }\r\n    protected actionHandler(delta: number) {\r\n        const attack = this.actions.find(action => (action.name = 'attack'))\r\n        if (this.target && this.target.hp > 0) {\r\n            const vectorToTarget = new THREE.Vector2(\r\n                -this.position.x + this.target.position.x,\r\n                -this.position.z + this.target.position.z,\r\n            ).normalize()\r\n            if (attack && this.distanceToTraget() < this.options.attackRange) {\r\n                this.dX = this.dZ = 0\r\n                attack.start(this.target)\r\n            } else if (this.distanceToTraget() > this.options.spotDistance) {\r\n                this.dX = 0\r\n                this.dZ = 0\r\n            } else {\r\n                this.dX = this.speed * vectorToTarget.x\r\n                this.dZ = this.speed * vectorToTarget.y\r\n            }\r\n            this.rotationAngle = Math.atan2(vectorToTarget.x, vectorToTarget.y)\r\n        } else {\r\n            this.dX = 0\r\n            this.dZ = 0\r\n        }\r\n    }\r\n    private options: IOptions\r\n    private target?: Unit\r\n    private distanceToTraget(): number {\r\n        if (this.target) {\r\n            const pos1 = new THREE.Vector2(this.position.x, this.position.z)\r\n            const pos2 = new THREE.Vector2(this.target.position.x, this.target.position.z)\r\n            return pos1.distanceTo(pos2)\r\n        } else {\r\n            return Infinity\r\n        }\r\n    }\r\n\r\n    public static loadModel(callback: (model: THREE.Group) => void) {\r\n        const loader = new FBXLoader()\r\n        loader.load(Zombie.modelPath, (model: any) => {\r\n            model.animations = []\r\n            for (let i = 0; i < Zombie.animationsPath.length; i++) {\r\n                loader.load(Zombie.animationsPath[i], ({ animations }: any) => {\r\n                    animations[0].name = getAnimationName(Zombie.animationsPath[i])\r\n                    model.animations.push(animations[0])\r\n                    if (model.animations.length === Zombie.animationsPath.length) {\r\n                        callback(model)\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n    private static modelPath = 'textures/zombie/model.fbx'\r\n    private static animationsPath: string[] = [\r\n        'textures/zombie/idle.fbx',\r\n        'textures/zombie/walkforward.fbx',\r\n        'textures/zombie/attack.fbx',\r\n        'textures/zombie/dying.fbx',\r\n        'textures/zombie/hit.fbx',\r\n    ]\r\n}\r\n","import { SkeletonUtils } from 'three/examples/jsm/utils/SkeletonUtils'\r\nimport Zombie from './Zombie'\r\nimport World from '../World'\r\n\r\nexport default class ZombieFactory {\r\n    public static spawnZombie(x: number, y: number): void {\r\n        const options = {\r\n            hp: 500,\r\n            speed: 50,\r\n            hpRegen: 10,\r\n            damage: 200,\r\n            attackRange: 200,\r\n            attackDuration: 1100,\r\n            spotDistance: 1000,\r\n        }\r\n        const world = World.getInstance()\r\n        const { animations } = world.models.zombie\r\n        const model: any = SkeletonUtils.clone(world.models.zombie)\r\n        model.animations = animations\r\n        new Zombie(model, x, y, options)\r\n    }\r\n}\r\n","import * as THREE from 'three'\r\nimport Swat from './Unit/Swat'\r\nimport Unit from './Unit/Unit'\r\nimport Projectile from './Projectile/Projectile'\r\nimport Zombie from './Unit/Zombie'\r\nimport ZombieFactory from \"./Unit/ZombieFactory\";\r\nimport Shader from \"./Shader/Shader\";\r\n\r\nexport const WORLD_SIZE = 10000\r\nexport const WORLD_QUADS_SIZE = 500\r\nconst SPAWN_INTERVAL = 200\r\n\r\nexport type WorldObject = Unit | Projectile\r\n\r\ninterface IWorldObjects {\r\n    units: Unit[]\r\n    projectiles: Projectile[]\r\n}\r\n\r\nexport interface IKeyMap {\r\n    [s: string]: boolean\r\n}\r\n\r\ninterface IModel {\r\n    [s: string]: any\r\n}\r\n\r\nexport default class World {\r\n    private constructor(scene: THREE.Scene, width: number, height: number, models: IModel) {\r\n        World.instance = this\r\n        this.width = width\r\n        this.height = height\r\n        this.models = models\r\n        this.scene = scene\r\n        this.camera = this.prepareCamera()\r\n        this.objects = {\r\n            units: [],\r\n            projectiles: [],\r\n        }\r\n        this.quadtree = []\r\n        this.prepareMap()\r\n        this.spawnPlayer(0, 0)\r\n        this.keyMap = {}\r\n        this.mousePosition = new THREE.Vector2(0, WORLD_SIZE)\r\n\r\n        const onkeydown = (e: KeyboardEvent): void => {\r\n            this.keyMap[e.code] = e.type === 'keydown'\r\n        }\r\n        const onkeyup = onkeydown\r\n        const onmousewheel = (e: Event): void => {\r\n            if (e instanceof WheelEvent) {\r\n                const delta = e.deltaY / -2000\r\n                if (this.camera.zoom + delta >= 0.5 && this.camera.zoom + delta <= 2) {\r\n                    this.camera.zoom += delta\r\n                    this.camera.updateProjectionMatrix()\r\n                }\r\n            }\r\n        }\r\n        const onmousemove = (e: MouseEvent) => {\r\n            const mouse = new THREE.Vector2()\r\n            mouse.x = (e.clientX / this.width) * 2 - 1\r\n            mouse.y = -(e.clientY / this.height) * 2 + 1\r\n            if (this.ground) {\r\n                const raycaster = new THREE.Raycaster()\r\n                raycaster.setFromCamera(mouse, this.camera)\r\n                const objAtPoint = raycaster.intersectObjects([this.ground])\r\n                if (objAtPoint.length) {\r\n                    objAtPoint.forEach(obj => {\r\n                        if (obj.object === this.ground) {\r\n                            this.mousePosition.x = obj.point.x\r\n                            this.mousePosition.y = obj.point.z\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        const onmousedown = (e: MouseEvent) => {\r\n            if (e.button === 0) {\r\n                this.keyMap['ButtonLeft'] = true\r\n            } else if (e.button === 2) {\r\n                this.keyMap['ButtonRight'] = true\r\n            }\r\n        }\r\n        const onmouseup = (e: MouseEvent) => {\r\n            if (e.button === 0) {\r\n                this.keyMap['ButtonLeft'] = false\r\n            } else if (e.button === 2) {\r\n                this.keyMap['ButtonRight'] = false\r\n            }\r\n        }\r\n\r\n        const el = document.getElementById('renderer')\r\n        if (el) {\r\n            window.addEventListener('keydown', onkeydown)\r\n            window.addEventListener('keyup', onkeyup)\r\n            window.addEventListener('mousewheel', onmousewheel)\r\n            window.addEventListener('contextmenu', e => e.preventDefault())\r\n            el.addEventListener('mousedown', onmousedown)\r\n            el.addEventListener('mouseup', onmouseup)\r\n            el.addEventListener('mousemove', onmousemove)\r\n        }\r\n    }\r\n\r\n    public width: number\r\n    public height: number\r\n    public size = WORLD_SIZE\r\n    public models: IModel\r\n    public static SOUNDS_LEVEL = 0.2\r\n    public static getInstance(options?: any): World {\r\n        if (!World.instance) {\r\n            const {scene, width, height, models} = options\r\n            World.instance = new World(scene, width, height, models);\r\n            // ... any one time initialization goes here ...\r\n        }\r\n        return World.instance;\r\n    }\r\n    public add(obj: WorldObject | Shader): void {\r\n        if (obj instanceof Unit) {\r\n            this.objects.units.push(obj)\r\n            this.scene.add(obj.model)\r\n        } else if (obj instanceof Projectile) {\r\n            this.objects.projectiles.push(obj)\r\n            this.scene.add(obj)\r\n        } else {\r\n            this.shaders.push(obj)\r\n            this.scene.add(obj)\r\n        }\r\n    }\r\n    public remove(obj: WorldObject | Shader) {\r\n        if (obj instanceof Unit) {\r\n            this.dispose(obj.model)\r\n            this.objects.units = this.objects.units.filter(unit => unit !== obj)\r\n            if (obj === this.player) {\r\n                this.spawnPlayer(0, 0)\r\n            }\r\n        } else if (obj instanceof Projectile) {\r\n            this.dispose(obj)\r\n            this.objects.projectiles = this.objects.projectiles.filter(proj => proj !== obj)\r\n        } else {\r\n            this.dispose(obj)\r\n            this.shaders = this.shaders.filter(shader => shader!== obj)\r\n        }\r\n    }\r\n    private dispose(obj: THREE.Object3D): void {\r\n        this.scene.remove(obj)\r\n        if (obj instanceof THREE.Mesh) {\r\n            this.scene.remove(obj)\r\n            obj.geometry.dispose()\r\n            Array.isArray(obj.material) ? obj.material.forEach(material => material.dispose()) : obj.material.dispose()\r\n        }\r\n        if (obj.children) {\r\n            obj.children.forEach(child => this.dispose(child))\r\n        }\r\n    }\r\n\r\n    public update(delta: number): void {\r\n        if (this.spawnInterval <= 0) {\r\n            this.spawnInterval = SPAWN_INTERVAL\r\n            if (this.player && this.objects.units.length < World.maxUnits) {\r\n                const angle = Math.random() * Math.PI * 2\r\n                const spawnRadius = WORLD_SIZE / 15\r\n                const x = this.player.position.x + (Math.cos(angle) * spawnRadius)\r\n                const y = this.player.position.z + (Math.sin(angle) * spawnRadius)\r\n                ZombieFactory.spawnZombie(x, y)\r\n            }\r\n        } else {\r\n            this.spawnInterval -= delta\r\n        }\r\n        if (this.player) {\r\n            this.camera.position.set(\r\n                -WORLD_SIZE / 2 + this.player.position.x,\r\n                WORLD_SIZE / Math.sqrt(2) + this.player.position.y,\r\n                -WORLD_SIZE / 2 + +this.player.position.z,\r\n            )\r\n        }\r\n        this.updateQuadTree()\r\n        this.objects.units.forEach(unit => {\r\n            unit.update(delta, this.getNearObjects(unit.quadtreeIndex), this.keyMap, this.mousePosition)\r\n        })\r\n        this.objects.projectiles.forEach(projectile => {\r\n            projectile.update(delta, this.getNearObjects(projectile.quadtreeIndex))\r\n        })\r\n        this.shaders.forEach(shader => {\r\n            shader.update(delta)\r\n        })\r\n    }\r\n    public camera: THREE.OrthographicCamera\r\n    public player?: Unit\r\n    private spawnPlayer(x: number, z: number) {\r\n        this.objects.units.forEach(unit => {\r\n            if (unit instanceof Zombie) {\r\n                this.dispose(unit.model)\r\n                this.remove(unit)\r\n                //unit.updateTarget()\r\n            }\r\n        })\r\n        this.player = undefined\r\n        const model = this.models.swat\r\n        const player = new Swat(model, x, z)\r\n        this.camera.position.set(-WORLD_SIZE / 2, WORLD_SIZE / Math.sqrt(2), -WORLD_SIZE / 2)\r\n        this.camera.lookAt(model.position)\r\n        this.player = player\r\n    }\r\n\r\n    private prepareCamera(): THREE.OrthographicCamera {\r\n        const camera = new THREE.OrthographicCamera(\r\n            this.width / -2,\r\n            this.width / 2,\r\n            this.height / 2,\r\n            this.height / -2,\r\n            1,\r\n            WORLD_SIZE * 2,\r\n        )\r\n        camera.position.set(-WORLD_SIZE / 2, WORLD_SIZE / Math.sqrt(2), -WORLD_SIZE / 2)\r\n        camera.zoom = 0.75\r\n        camera.updateProjectionMatrix()\r\n        this.scene.add(camera)\r\n        return camera\r\n    }\r\n\r\n    private prepareMap() {\r\n        const light1 = new THREE.PointLight(0xffffff, 1)\r\n        const light2 = new THREE.PointLight(0xffffff, 1)\r\n        const light3 = new THREE.PointLight(0xffffff, 1)\r\n        light1.position.set(-WORLD_SIZE / 2, 0, 0)\r\n        light2.position.set(0, 0, -WORLD_SIZE / 2)\r\n        light3.position.set(0, WORLD_SIZE, 0)\r\n        const lights: THREE.PointLight[] = [light1, light2, light3]\r\n        const background = this.models.background\r\n        const background1 = this.models.background1\r\n        this.scene.add(background, background1, ...lights)\r\n        this.ground = background1\r\n    }\r\n\r\n    private getNearObjects(quadtreeIndex?: number): Unit[] {\r\n        if (!quadtreeIndex) {\r\n            return []\r\n        }\r\n        const quads: Unit[] = []\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                const currentIndex =\r\n                    quadtreeIndex - WORLD_SIZE / WORLD_QUADS_SIZE - 1 + j + (i * WORLD_SIZE) / WORLD_QUADS_SIZE\r\n                // eslint-disable-next-line\r\n                if (this.quadtree[currentIndex]?.length) {\r\n                    const aliveUnits = this.quadtree[currentIndex].filter(unit => unit.hp > 0)\r\n                    quads.push(...aliveUnits)\r\n                }\r\n            }\r\n        }\r\n        return quads\r\n    }\r\n\r\n    private updateQuadTree() {\r\n        const quadtree: Unit[][] = []\r\n        this.objects.units.forEach(unit => {\r\n            const a = Math.ceil((WORLD_SIZE / 2 - unit.position.z) / WORLD_QUADS_SIZE) - 1\r\n            const b = Math.ceil((WORLD_SIZE / 2 - unit.position.x) / WORLD_QUADS_SIZE) - 1\r\n            const index = (a * WORLD_SIZE) / WORLD_QUADS_SIZE + b\r\n            unit.quadtreeIndex = index\r\n            if (!quadtree[index]) {\r\n                quadtree[index] = [unit]\r\n            } else {\r\n                quadtree[index].push(unit)\r\n            }\r\n        })\r\n        this.objects.projectiles.forEach(proj => {\r\n            const a = Math.ceil((WORLD_SIZE / 2 - proj.position.z) / WORLD_QUADS_SIZE) - 1\r\n            const b = Math.ceil((WORLD_SIZE / 2 - proj.position.x) / WORLD_QUADS_SIZE) - 1\r\n            proj.quadtreeIndex = (a * WORLD_SIZE) / WORLD_QUADS_SIZE + b\r\n        })\r\n        this.quadtree = quadtree\r\n    }\r\n\r\n    private spawnInterval = SPAWN_INTERVAL\r\n    private objects: IWorldObjects\r\n    private shaders: Shader[] = []\r\n    private quadtree: Unit[][]\r\n    private keyMap: IKeyMap\r\n    private mousePosition: THREE.Vector2\r\n    private ground?: THREE.Mesh\r\n    private scene: THREE.Scene\r\n    private static instance?: World\r\n    private static maxUnits = 20\r\n}\r\n","import React, { useState, useRef, useEffect, ReactElement } from 'react'\r\nimport * as THREE from 'three'\r\nimport World from '../objects/World'\r\nimport { modelLoader } from '../helpers/modelLoader'\r\n\r\nfunction Renderer({ setState }: any): ReactElement {\r\n    const [models, setModels]: any = useState({\r\n        isLoaded: false,\r\n    })\r\n    const ref = useRef<HTMLDivElement>(null)\r\n    const handleWindowResize = (renderer: THREE.Renderer): void => {\r\n        if (ref.current) {\r\n            const world = World.getInstance()\r\n            const width = ref.current.clientWidth\r\n            const height = ref.current.clientHeight\r\n            const { camera } = world\r\n\r\n            world.width = width\r\n            world.height = height\r\n            renderer.setSize(width, height)\r\n            camera.left = width / -2\r\n            camera.right = width / 2\r\n            camera.top = height / 2\r\n            camera.bottom = height / -2\r\n            camera.updateProjectionMatrix()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        modelLoader(setModels)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (ref.current && models.isLoaded) {\r\n            const { current } = ref\r\n            const width = current.clientWidth\r\n            const height = current.clientHeight\r\n            const renderer = new THREE.WebGLRenderer({\r\n                antialias: true,\r\n            })\r\n            renderer.setSize(width, height)\r\n            const scene = new THREE.Scene()\r\n            scene.background = new THREE.Color('white')\r\n            const world = World.getInstance({ scene, width, height, models })\r\n            current.appendChild(renderer.domElement)\r\n            const render = (delta: number): void => {\r\n                const { player } = world\r\n                const timestamp = performance.now()\r\n                if (document.hasFocus()) {\r\n                    world.update(delta)\r\n                    setState({ player })\r\n                }\r\n                window.requestAnimationFrame(() => render(performance.now() - timestamp))\r\n                renderer.render(scene, world.camera)\r\n            }\r\n            render(0)\r\n            window.addEventListener('resize', () => handleWindowResize(renderer))\r\n        }\r\n    }, [models])\r\n\r\n    return models.isLoaded ? <div id=\"renderer\" className=\"renderer\" ref={ref} /> : <div>Loading...</div>\r\n}\r\n\r\nexport default Renderer\r\n","import * as THREE from 'three'\r\nimport { WORLD_SIZE, WORLD_QUADS_SIZE } from '../objects/World'\r\nimport Swat from '../objects/Unit/Swat'\r\nimport Zombie from '../objects/Unit/Zombie'\r\n\r\nexport function modelLoader(setModels: any) {\r\n    const background = new THREE.GridHelper(WORLD_SIZE, WORLD_SIZE / WORLD_QUADS_SIZE, 0x000000, 0x222222)\r\n    const background1 = new THREE.Mesh(\r\n        new THREE.BoxBufferGeometry(WORLD_SIZE, 1, WORLD_SIZE),\r\n        new THREE.MeshBasicMaterial({\r\n            color: 'grey',\r\n        }),\r\n    )\r\n    background1.position.y = -10\r\n    Swat.loadModel((swat: THREE.Group) => {\r\n        Zombie.loadModel((zombie: THREE.Group) => {\r\n            setModels({ background, background1, swat, zombie, isLoaded: true })\r\n        })\r\n    })\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport Swat from '../objects/Unit/Swat'\r\nimport World from '../objects/World'\r\n\r\nfunction Hud({ state }: any): ReactElement {\r\n    const { player } = state\r\n    return player instanceof Swat ? (\r\n        <div className={'hud'}>\r\n            <div className={'energybar'}>\r\n                <div className={'available'} style={{ width: `${(100 * player.energy) / player.maxEnergy}%` }} />\r\n                <div className={'missing'} />\r\n            </div>\r\n            <div className={'healthbar'}>\r\n                <div className={'available'} style={{ width: `${Math.max((100 * player.hp) / player.maxHp, 0)}%` }} />\r\n                <div className={'missing'} />\r\n            </div>\r\n            <div className={'weaponbar'}>\r\n                <span>{`${player.currentWeapon.name} ${player.currentWeapon.bullets}/${\r\n                    player.currentWeapon.maxBullets\r\n                    // eslint-disable-next-line\r\n                }${player.currentAction?.name === 'reload' ? ' Reloading...' : ''}`}</span>\r\n            </div>\r\n            <div className={'optionsbar'}>\r\n                <img src={'icons/sound.png'} alt={'sound'} className=\"sound-icon\" />\r\n                <input\r\n                    type=\"range\"\r\n                    min=\"0\"\r\n                    max=\"100\"\r\n                    defaultValue={World.SOUNDS_LEVEL * 100}\r\n                    className=\"sound-slider\"\r\n                    onChange={e => {\r\n                        World.SOUNDS_LEVEL = Number(e.target.value) / 100\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    ) : (\r\n        <> </>\r\n    )\r\n}\r\n\r\nexport default Hud\r\n","import React, { ReactElement, useState } from 'react'\nimport Renderer from './Renderer'\nimport Hud from './Hud'\n\nfunction App(): ReactElement {\n    const [state, setState] = useState({})\n    return (\n        <div className=\"app\">\n            <Hud state={state} />\n            <Renderer setState={setState} />\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport './styles/index.css'\nimport './styles/hud.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}